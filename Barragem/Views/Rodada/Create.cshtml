@model Barragem.Models.Rodada

@{
    ViewBag.Title = "Create";
}

@using (Html.BeginForm())
{
    @Html.AntiForgeryToken()
    @Html.ValidationSummary(true)

    <legend>Criar Rodada</legend>

    <div class="editor-field">
        <input type="hidden" name="codigo" value="A" />
        <input type="hidden" name="sequencial" value="1" />
    </div>

    <div class="row">
        <div class="col-md-4">
            @Html.LabelFor(model => model.dataInicio)
            <div class="input-group date" id="dataInicio" data-date-format="dd/mm/yyyy">
                @Html.TextBoxFor(model => model.dataInicio, new { @class = "form-control", @readonly = "readonly" })
                <span class="input-group-addon">
                    <span class="glyphicon glyphicon-calendar">
                    </span>
                </span>
            </div>

            @Html.ValidationMessageFor(model => model.dataInicio)
        </div>
    </div>

    <div class="row">
        <div class="col-md-4">
            @Html.LabelFor(model => model.dataFim)
            <div class="input-group date" id="dataFim" data-date-format="dd/mm/yyyy">
                @Html.TextBoxFor(model => model.dataFim, new { @class = "form-control", @readonly = "readonly" })
                <span class="input-group-addon">
                    <span class="glyphicon glyphicon-calendar">
                    </span>
                </span>
            </div>

            @Html.ValidationMessageFor(model => model.dataFim)
        </div>
    </div>

    if (Roles.IsUserInRole("admin"))
    {
        <div class="row">
            <div class="col-md-4">
                @Html.LabelFor(model => model.barragemId)
                <div class="input-group">
                    @Html.DropDownList("barragemId", null, new { @class = "form-control" })
                </div>
                @Html.ValidationMessageFor(model => model.barragemId)
            </div>
        </div>
    }
    else
    {
        <input type="hidden" name="barragemId" value="@ViewBag.barraId" />
    }

    <div class="row">
        <div class="col-md-4">
            @Html.LabelFor(model => model.temporadaId)
            <div class="input-group">
                @Html.DropDownList("temporadaId", null, new { @class = "form-control" })
            </div>
            @Html.ValidationMessageFor(model => model.temporadaId)
        </div>
    </div>

    <br />
    <div class="row">
        <div class="col-xs-12">
            <input class="btn btn-primary" onclick="ValidarFechamentoRodada(1)" type="button" value="Criar" />
            <input class="btn btn-success" onclick="ValidarFechamentoRodada(2)" type="button" value="Criar e Sortear" />
        </div>
    </div>
    <div class="row">
        <div class="col-xs-12">
            <input type="checkbox" id="notificarApp" name="notificarApp" checked>
            <label for="notificarApp">Notificar jogadores</label>
        </div>
    </div>
}

<div>
    @Html.ActionLink("Voltar", "Index")
</div>

@section Scripts {

    <script type="text/javascript">
        $(function () {
            $("#dataInicio").datepicker({
                language: 'pt-BR',
                pickTime: false
            });
            $("#dataFim").datepicker({
                language: 'pt-BR',
                pickTime: false
            });
        });

        function ValidarFechamentoRodada(acao) {

            var id = $("#temporadaId").val();

            $.ajax({
                type: "GET",
                url: "/Rodada/ValidarRodadasTemporada",
                dataType: "json",
                data: {
                    "idTemporada": id
                },
                traditional: true,
                contentType: "application/json; charset=utf-8",
                success: function (response) {
                    if (typeof response == "object") {
                        toastr.options = {
                            "positionClass": "toast-top-center"
                        }
                        if (response.retorno == "ERRO") {
                            toastr.error(response.erro, "Erro");
                        } else
                        {
                            if (response.retorno != "OK")
                            {
                                $.confirm({
                                    title: "<span style='color:red'>ATENÇÃO!</span>",
                                    content: "Não é possível gerar rodada pois foi excedido o número de rodadas dessa temporada. </br> O que deseja fazer?",
                                    columnClass: 'medium',
                                    buttons: {
                                        a: {
                                            text: 'Aumentar rodadas na temporada',
                                            btnClass: 'btn-primary',
                                            action: function () {
                                                location.href = "/Temporada/Edit/" + id;
                                            }
                                        },
                                        b: {
                                            text: 'Criar uma nova temporada',
                                            btnClass: 'btn-primary',
                                            action: function () {
                                                location.href = "/Temporada/Create";
                                            }
                                        }
                                    }
                                });
                            }
                            else
                            {
                                event.preventDefault();
                                if (acao == 1)
                                {
                                    document.forms[1].submit();
                                }
                                else if (acao == 2)
                                {
                                    document.forms[1].action = "/Rodada/CriaESorteia";
                                    document.forms[1].submit();
                                }
                            }
                        }
                    }
                },
                error: function (jqXHR, textStatus, errorThrown) {
                    toastr.error(errorThrown, "Erro");
                }
            });
        }


    </script>
}
