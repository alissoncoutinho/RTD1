@model Barragem.Models.UserProfile

@{
    ViewBag.Title = "Dados do Usuário";
}

@using (Html.BeginForm("EditaUsuario", "Account", FormMethod.Post, new { @enctype = "multipart/form-data" }))
{
    @Html.AntiForgeryToken()
    @Html.ValidationSummary("", new { @class = "alert-danger" })

    <div class="form-horizontal">
        <legend>
            Dados do Jogador
            @if (ViewBag.solicitarAtivacao != "")
            {
                @Html.Raw("<font color=red> - Seu cadastro está pendente ou desativado. Para ativar clique no botão abaixo.</font>")
            }
        </legend>
                @if (ViewBag.solicitarAtivacao != "")
                {
                    <a class="btn btn-primary btn-danger" href="@Url.Action("../Account/SolicitarAtivacao", new { uName = Model.UserName })">Solicitar Ativação</a><br><br>
        }
        
        <div class="form-group">
            @Html.HiddenFor(m => m.UserId)
            @Html.HiddenFor(m => m.isRanckingGerado)
            @Html.HiddenFor(m => m.UserName)
            @Html.HiddenFor(m => m.barragemId)
            @Html.LabelFor(m => m.UserName, new { @class = "col-md-2" })
            <div class="col-md-5">
                @Html.Raw(Model.UserName)
            </div>
        </div>
        <div class="form-group">
            @Html.LabelFor(m => m.situacao, new { @class = "col-md-2" })
            <div class="col-md-3">
                @if (!Model.situacao.Equals("pendente") && !Model.situacao.Equals("suspenso") &&
                    !Model.situacao.Equals("desativado") && !Model.situacao.Equals("Ativamento solicitado"))
                {
                    <select id="situacao" name="situacao" class="form-control">
                        <option value="ativo" @if (Model.situacao.Equals("ativo")) { @Html.Raw("selected")    }>ativo</option>
                        <!--option value="desativado" if (Model.situacao.Equals("desativado")) { Html.Raw("selected")     }>desativado</option-->
                        <option value="licenciado" @if (Model.situacao.Equals("licenciado")) { @Html.Raw("selected")      }>licenciado</option>
                        @if ((Roles.IsUserInRole("admin")) || (Roles.IsUserInRole("organizador")))
                        {
                            <option value="pendente" @if (Model.situacao.Equals("pendente")) { @Html.Raw("selected")     }>pendente</option>
                            <option value="suspenso" @if (Model.situacao.Equals("suspenso")) { @Html.Raw("selected")     }>suspenso</option>
                            <option value="desativado" @if (Model.situacao.Equals("desativado")) { @Html.Raw("selected")     }>desativado</option>
                            <option value="inativo" @if (Model.situacao.Equals("inativo")) { @Html.Raw("selected")      }>inativo</option>
                        }
                    </select>
                }
                else
                {
                    if ((Roles.IsUserInRole("admin")) || (Roles.IsUserInRole("organizador")))
                    {
                        <select id="situacao" name="situacao" class="form-control">
                            <option value="ativo">ativo</option>
                            <option value="pendente" @if (Model.situacao.Equals("pendente")) { @Html.Raw("selected")      }>pendente</option>
                            <option value="suspenso" @if (Model.situacao.Equals("suspenso")) { @Html.Raw("selected")      }>suspenso</option>
                            <option value="desativado" @if (Model.situacao.Equals("desativado")) { @Html.Raw("selected")      }>desativado</option>
                            <option value="Ativamento solicitado" @if (Model.situacao.Equals("Ativamento solicitado")) { @Html.Raw("selected")       }>Ativamento solicitado</option>
                        </select>
                    }
                    else
                    {
                        @Html.Raw(Model.situacao)
                        <input type="hidden" name="situacao" value="@Html.Raw(Model.situacao)">
                    }
                }
            </div>
        </div>
        
        <div class="form-group">
            @Html.LabelFor(m => m.nome, new { @class = "col-md-2" })*
            <div class="col-md-6">
                @Html.TextBoxFor(m => m.nome, new { @class = "form-control" })
                @Html.ValidationMessageFor(m => m.nome, "", new { @class = "alert-danger" })
            </div>
        </div>
        <div class="form-group">
            @Html.LabelFor(model => model.dataNascimento, new { @class = "col-md-2" })*
            <div class="col-md-2">
                <div class="input-group date" id="dataNascimento" data-date-format="dd/mm/yyyy">
                    <input id="dataNascimento" name="dataNascimento" value="@Html.Raw(Model.dataNascimento)" type="text" class="form-control" />
                    <span class="input-group-addon">
                        <span class="glyphicon glyphicon-calendar">
                        </span>
                    </span>
                    @Html.ValidationMessageFor(model => model.dataNascimento, "", new { @class = "alert-danger" })
                </div>
            </div>
        </div>
        <div class="form-group">
            @Html.LabelFor(m => m.naturalidade, new { @class = "col-md-2" })
            <div class="col-md-6">
                @Html.TextBoxFor(m => m.naturalidade, new { @class = "form-control" })
            </div>
        </div>
        <div class="form-group">
            @Html.LabelFor(m => m.altura2, new { @class = "col-md-2" })*
            <div class="col-md-2">
                @Html.TextBoxFor(m => m.altura2, new { @class = "form-control" })
                @Html.ValidationMessageFor(m => m.altura2, "", new { @class = "alert-danger" })
            </div>
        </div>
        <div class="form-group">
            @Html.LabelFor(m => m.lateralidade, new { @class = "col-md-2" })
            <div class="col-md-2">
                <select id="lateralidade" name="lateralidade" class="form-control">
                    <option value="destro" @if (Model.lateralidade.Equals("destro")) { @Html.Raw("selected")   }>destro</option>
                    <option value="canhoto" @if (Model.lateralidade.Equals("canhoto")) { @Html.Raw("selected")   }>canhoto</option>
                </select>
            </div>
        </div>
        <div class="form-group">
            @Html.LabelFor(m => m.email, new { @class = "col-md-2" })*
            <div class="col-md-4">
                @Html.TextBoxFor(m => m.email, new { @class = "form-control" })
                @Html.ValidationMessageFor(m => m.email, "", new { @class = "alert-danger" })
            </div>
        </div>
        <div class="form-group">
            @Html.LabelFor(m => m.telefoneFixo, new { @class = "col-md-2" })
            <div class="col-md-2">
                @Html.TextBoxFor(m => m.telefoneFixo, new { @class = "form-control" })
                @Html.ValidationMessageFor(m => m.telefoneFixo, "", new { @class = "alert-danger" })
            </div>
        </div>
        <div class="form-group">
            @Html.LabelFor(m => m.telefoneCelular, new { @class = "col-md-2" })*
            <div class="col-md-2">
                @Html.TextBoxFor(m => m.telefoneCelular, new { @class = "form-control" })
                @Html.ValidationMessageFor(m => m.telefoneCelular, "", new { @class = "alert-danger" })
            </div>
        </div>
        <div class="form-group">
            @Html.LabelFor(m => m.telefoneCelular2, new { @class = "col-md-2" })
            <div class="col-md-2">
                @Html.TextBoxFor(m => m.telefoneCelular2, new { @class = "form-control" })
                @Html.ValidationMessageFor(m => m.telefoneCelular2, "", new { @class = "alert-danger" })
            </div>
        </div>
        <div class="form-group">
            @Html.LabelFor(m => m.bairro, new { @class = "col-md-2" })*
            <div class="col-md-2">
                @Html.TextBoxFor(m => m.bairro, new { @class = "form-control" })
                @Html.ValidationMessageFor(m => m.bairro, "", new { @class = "alert-danger" })
            </div>
        </div>
        @if ((Roles.IsUserInRole("admin")) || (Roles.IsUserInRole("organizador"))){
            <div class="form-group">
                @Html.LabelFor(model => model.classeId, new { @class = "col-md-2" })
                <div class="col-md-4">
                    @Html.DropDownList("classeId", null, new { @class = "form-control" })
                    @Html.ValidationMessageFor(model => model.classeId)
                </div>
            </div>

        }
        else
        {
            @Html.HiddenFor(m => m.classeId)
        }
        <div class="form-group">
            @Html.LabelFor(m => m.matriculaClube, new { @class = "col-md-2" })
            <div class="col-md-2">
                @Html.TextBoxFor(m => m.matriculaClube, new { @class = "form-control" })
            </div>
        </div>

        <div class="form-group">
            <input type="file" id="flPhoto" name="upload" />
            <table>
                <tr>
                    <td>
                        Width: <label id="lblWidth">200px</label>
                        Height: <label id="lblHeight">200px</label>
                    </td>
                    <td>
                        <a href="#" id="hlcropImage" style="vertical-align:top;">Crop Image</a>
                    </td>
                </tr>
                <tr>
                    <td>
                        <div style="height:400px; width:400px; overflow:auto;">
                            <img id="imgEmpPhoto" src="@Model.fotoURL" alt="Perfil Image" />
                        </div>
                    </td>
                    <td>
                        <canvas id="canvas" height="5" width="5" style="vertical-align:top;"></canvas>
                    </td>
                </tr>
            </table>
        </div>
        <p>
            <img id="imgCropped" src="#" style="display:none;" />
        </p>
        <input type="hidden" name="avatarCropped" id="avatarCropped" />

        @if ((Roles.IsUserInRole("admin")) || (Roles.IsUserInRole("organizador")) || (User.Identity.Name.ToLower().Equals(Model.UserName.ToLower())))
        {
            <input type="submit" value="Salvar" />

            if (Model.situacao == "pendente")
            {
                <a class="btn btn-primary btn-danger" href="/Account/Excluir?Id=@Model.UserId">Excluir</a>
            }
        }
    </div>

}

@section Scripts {
    @Scripts.Render("~/bundles/jqueryform")
    <script type="text/javascript">
        $(document).ready(function () {
            $("#dataNascimento").datepicker({
                language: 'pt-BR',
                pickTime: false
            });
            $("#altura2").mask("9,99");
            $("#telefoneFixo").mask("(99) 99999-9999");
            $("#telefoneCelular").mask("(99) 99999-9999/AAAAAA");
            $("#telefoneCelular2").mask("(99) 99999-9999/AAAAAA");
            $("#divFoto").click(function () {
                $("#inputfoto").click();
            });
        })


        var imageCropWidth = 0;
        var imageCropHeight = 0;
        var cropPointX = 0;
        var cropPointY = 0;
        var jcropApi;

        $(document).ready(function () {
            //initCrop();
        });

        $("#hlcropImage").on("click", function (e) {
            /*
            The event.preventDefault() method stops the default action of
            an element from happening. For example: Prevent a submit button
            from submitting a form. Prevent a link from following the URL
            */
            e.preventDefault();
            cropImage();
        });

        function initCrop() {
            $('#imgEmpPhoto').Jcrop({
                onChange: setCoordsAndImgSize,
                aspectRatio: 0, // 1 means will be same for height and weight
                onSelect: setCoordsAndImgSize
            }, function () { jcropApi = this });
        }

        function showCoordinate() {
            $("#lblWidth").text(imageCropWidth + "px");
            $("#lblHeight").text(imageCropHeight + "px");
        }

        function setCoordsAndImgSize(e) {
            imageCropWidth = e.w;
            imageCropHeight = e.h;
            cropPointX = e.x;
            cropPointY = e.y;

            $("#lblWidth").text(imageCropWidth + "px");
            $("#lblHeight").text(imageCropHeight + "px");
        }

        function cropImage() {

            if (imageCropWidth == 0 && imageCropHeight == 0) {
                alert("Please select crop area.");
                return;
            }

            var img = $("#imgEmpPhoto").attr("src");
            /*Show cropped image*/
            showCroppedImage();
        }

        function showCroppedImage() {
            var x1 = cropPointX;
            var y1 = cropPointY;
            var width = imageCropWidth;
            var height = imageCropHeight;
            var canvas = $("#canvas")[0];
            var context = canvas.getContext('2d');
            var img = new Image();
            img.onload = function () {
                canvas.height = height;
                canvas.width = width;
                context.drawImage(img, x1, y1, width, height, 0, 0, width, height);
                $('#avatarCropped').val(canvas.toDataURL());
            };

            img.src = $('#imgEmpPhoto').attr("src");

        }

        function readFile(input) {
            if (input.files && input.files[0]) {
                var reader = new FileReader();
                /*Destroy jcrop initialization other wise it will hold it previous image in img tag*/
                if (jcropApi != null) {
                    jcropApi.destroy();
                }

                reader.onload = function (e) {
                    $('#imgEmpPhoto').attr('src', "");
                    var img = $('#imgEmpPhoto').attr('src', e.target.result);

                    /*Current uploaded image size*/
                    var width = img[0].height;
                    var height = img[0].width;
                    $("#lblWidth").text(width + "px");
                    $("#lblHeight").text(height + "px");
                    //InitCrop must call here otherwise it will not work
                    initCrop();

                }
                reader.readAsDataURL(input.files[0]);
            }
        }

        $('#flPhoto').change(function () {
            readFile(this);
            //initCrop();
        });
    </script>

}

