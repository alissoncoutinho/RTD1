@using Barragem.Models;

@model Barragem.Models.Torneio

<ul class="nav nav-tabs" id="myTab">
    <li id="tab1" class='active'><a href="#tabPrimario" data-toggle="tab" onclick="ValidarTabAnterior(event,1)"><b>básico</b></a></li>
    <li id="tab2" class=""><a href="#tabInscricao" data-toggle="tab" onclick="ValidarTabAnterior(event,2)">inscrição</a></li>
    <li id="tab3" class=""><a href="#tabClasse" data-toggle="tab" onclick="ValidarTabAnterior(event,3)">classes</a></li>
    <li id="tab4" class=""><a href="#tabConfigFinais" data-toggle="tab" onclick="ValidarTabAnterior(event,4)">config.</a></li>
</ul>
@using (Html.BeginForm("CreateTorneio", "Torneio", FormMethod.Post, new { @class = "form-horizontal" }))
{
    @Html.AntiForgeryToken()
    @Html.ValidationSummary(false)
    <div class="tab-content">


        <!-- PRIMEIRA ABA: INFORMAÇÕES BÁSICAS -->
        <div id="tabPrimario" class="tab-pane fade in active">
            <div class="box-header with-border">
                <h4 class="box-title">Informações Básicas</h4>
            </div>
            <div class="box-body">

                <div class="form-group">
                    @Html.LabelFor(model => model.nome, new { @class = "col-sm-2 control-label" })
                    <div class="col-sm-8 col-xs-12 input-group">
                        @Html.TextBoxFor(model => model.nome, new { @class = "form-control" })
                    </div>
                    @Html.ValidationMessageFor(model => model.nome)
                </div>
                <div class="form-group">
                    @Html.LabelFor(model => model.dataInicio, new { @class = "col-sm-2 control-label" })
                    <div class="col-sm-4 input-group date" id="dataInicio" data-date-format="dd/mm/yyyy">
                        @Html.TextBoxFor(model => model.dataInicio, new { @class = "form-control", @type = "dataTorneio" })
                        <span class="input-group-addon">
                            <span class="glyphicon glyphicon-calendar">
                            </span>
                        </span>
                    </div>
                    @Html.ValidationMessageFor(model => model.dataInicio)
                </div>
                <div class="form-group">
                    @Html.LabelFor(model => model.dataFim, new { @class = "col-sm-2 control-label" })
                    <div class="col-sm-4 input-group date" id="dataFim" data-date-format="dd/mm/yyyy">
                        @Html.TextBoxFor(model => model.dataFim, new { @class = "form-control", @type = "dataTorneio" })
                        <span class="input-group-addon">
                            <span class="glyphicon glyphicon-calendar">
                            </span>
                        </span>
                    </div>
                    @Html.ValidationMessageFor(model => model.dataFim)
                </div>
                <div class="form-group">
                    @Html.LabelFor(model => model.cidade, new { @class = "col-sm-2 control-label" })
                    <div class="col-sm-8 col-xs-12 input-group">
                        @Html.TextBoxFor(model => model.cidade, new { @class = "form-control" })
                    </div>
                    @Html.ValidationMessageFor(model => model.cidade)
                </div>
                <div class="form-group">
                    @Html.LabelFor(model => model.local, new { @class = "col-sm-2 control-label" })
                    <div class="col-sm-8 col-xs-12 input-group">
                        @Html.TextBoxFor(model => model.local, new { @class = "form-control" })
                    </div>
                    @Html.ValidationMessageFor(model => model.local)
                </div>
                <div class="form-group">
                    @Html.LabelFor(model => model.premiacao, new { @class = "col-sm-2 control-label" })
                    <div class="col-sm-8 col-xs-12 input-group">
                        @Html.TextBoxFor(model => model.premiacao, new { @class = "form-control", @placeholder = "" })
                    </div>
                    @Html.ValidationMessageFor(model => model.premiacao)
                </div>
                <div class="form-group">
                    @Html.LabelFor(model => model.contato, new { @class = "col-sm-2 control-label" })
                    <div class="col-sm-8 col-xs-12 input-group">
                        @Html.TextAreaFor(model => model.contato)
                    </div>
                </div>
                <a href="#tabInscricao" id="btnTab1" class="btn btn-info" data-toggle="tab" onclick="ValidarTab1(event, false)"><b>Avançar</b></a>
            </div>
        </div>


        <!-- SEGUNDA ABA: INSCRIÇÕES -->
        <div id="tabInscricao" class="tab-pane fade">
            <div class="box-header with-border">
                <h4 class="box-title">Inscrições</h4>
            </div>
            <div class="box-body">
                <div class="form-group">
                    @Html.LabelFor(model => model.dataFimInscricoes, new { @class = "col-sm-2 control-label" })
                    <div class="col-sm-4 input-group date" id="dataFimInscricoes" data-date-format="dd/mm/yyyy">
                        @Html.TextBoxFor(model => model.dataFimInscricoes, new { @class = "form-control", @type = "datatorneio" })
                        <span class="input-group-addon">
                            <span class="glyphicon glyphicon-calendar">
                            </span>
                        </span>
                    </div>
                    @Html.ValidationMessageFor(model => model.dataFimInscricoes)
                </div>
                <div class="form-group">
                    @Html.Label("Em quantas categorias o jogador poderá se inscrever?", new { @class = "col-sm-2 control-label" })
                    <div class="col-sm-4 col-xs-12 input-group">
                        <select name="qtddCategoriasPorJogador" id="qtddCategoriasPorJogador" class="form-control" onchange="habilibarValoresInscricao()">
                            <option value="1">1 categoria</option>
                            <option value="2">2 categoria</option>
                            <option value="3">3 categoria</option>
                            <option value="4">4 categoria</option>
                        </select>
                    </div>
                </div>
                <div class="form-group">
                    @Html.Label("Qual valor o jogador irá pagar se inscrever em:", new { @class = "col-sm-4 control-label" })
                </div>
                <div id="valorDiv" class="form-group">
                    @Html.Label("1 categoria", new { @class = "col-sm-2 control-label" })
                    <div class="col-sm-4 col-xs-10 input-group">
                        @Html.TextBoxFor(model => model.valor, new { @class = "form-control", @placeholder = "Informe 0 para torneio gratuito" })
                    </div>
                    @Html.ValidationMessageFor(model => model.valor)
                </div>
                <div id="valorDiv2" class="form-group">
                    @Html.Label("2 categorias", new { @class = "col-sm-2 control-label" })
                    <div class="col-sm-4 col-xs-10 input-group">
                        @Html.TextBoxFor(model => model.valor2, new { @class = "form-control", @placeholder = "informe o valor total da inscrição" })
                    </div>
                    @Html.ValidationMessageFor(model => model.valor2)
                </div>
                <div id="valorDiv3" class="form-group">
                    @Html.Label("3 categorias", new { @class = "col-sm-2 control-label" })
                    <div class="col-sm-4 col-xs-10 input-group">
                        @Html.TextBoxFor(model => model.valor3, new { @class = "form-control", @placeholder = "informe o valor total da inscrição" })
                    </div>
                    @Html.ValidationMessageFor(model => model.valor3)
                </div>
                <div id="valorDiv4" class="form-group">
                    @Html.Label("4 categorias", new { @class = "col-sm-2 control-label" })
                    <div class="col-sm-4 col-xs-10 input-group">
                        @Html.TextBoxFor(model => model.valor4, new { @class = "form-control", @placeholder = "informe o valor total da inscrição" })
                    </div>
                    @Html.ValidationMessageFor(model => model.valor4)
                </div>
                @Html.Label("Qual valor do desconto? (opcional)", new { @class = "control-label" })
                <div class="form-group">
                    <div class="col-md-6 col-xs-12">
                        <div class="row">
                            <div class="col-xs-1 col-md-1">
                                <input type="checkbox" value="true" name="isDesconto" id="isDesconto" onclick="CadastrarValorDescontoSocio()" />
                            </div>
                            <div class="col-xs-6 col-md-4">
                                <select name="descontoPara" class="form-control"><option value="sócio do clube">sócio</option><option value="barragista">barragista</option></select>
                            </div>
                            <div class="col-xs-4 col-md-4">
                                <div class="form-group">
                                    @Html.Label("R$", new { @class = "col-xs-5 col-md-3 control-label" })
                                    <div class="col-xs-6 col-md-6 input-group">
                                        @Html.TextBoxFor(model => model.valorSocio, new { @class = "form-control" })
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
                <div class="form-group">
                    <div class="col-md-6 col-xs-12">
                        <div class="row">
                            <div class="col-xs-1 col-md-1">
                                <input type="checkbox" value="true" name="isDescontoFederado" id="isDescontoFederado" />
                            </div>
                            <div class="col-xs-6 col-md-4">
                                @Html.Label("Federado", new { @class = "control-label" })
                            </div>
                            <div class="col-xs-4 col-md-4">
                                <div class="form-group">
                                    @Html.Label("R$", new { @class = "col-xs-5 col-md-3 control-label" })
                                    <div class="col-xs-6 col-md-6 input-group">
                                        @Html.TextBoxFor(model => model.valorDescontoFederado, new { @class = "form-control" })
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>

                <a href="#tabClasse" id="btnTab2" class="btn btn-info" data-toggle="tab" onclick="ValidarTab2(event, false)"><b>Avançar</b></a>
                <!--input type="submit" class="btn btn-cta-secondary" name="salvar" value="salvar" /-->
            </div>
        </div>


        <div id="tabClasse" class="tab-pane fade">
            <div class="box-header with-border">
                <h4 class="box-title">Categorias</h4>
            </div>
            <div class="box-body">
                <input type="hidden" id="pontuacaoLiga" value="@if (ViewBag.UnicoCircuitoBeachTennis) {@Html.Raw("100") } else {@Html.Raw("-") }" name="pontuacaoLiga">
                @if (ViewBag.LigasDisponiveis.Count > 0)
                {
                    <div class="panel panel-default">
                        @if (ViewBag.LigasDisponiveis.Count == 1)
                        {
                            <div class="panel-heading"><b>Este torneio pontuará para o circuito?</b></div>
                        }
                        else
                        {
                            <div class="panel-heading"><b>Este torneio pontuará para quais circuitos?</b></div>
                        }
                        <div class="panel-body">
                            @foreach (var lg in ViewBag.LigasDisponiveis)
                            {
                                <div class="row" style="padding-left: 15px;">
                                    <input type="checkbox" name="liga" class="ligas" value="@lg.Liga.Id" onchange="inputCheckboxSelectPontos(this);" @if (ViewBag.UnicoCircuitoBeachTennis) { @Html.Raw("checked") }>
                                    @if (ViewBag.isModeloTodosContraTodos)
                                    {
                                        <span>@Html.Raw(lg.Liga.Nome)</span>
                                    }
                                    else
                                    {
                                        if (ViewBag.barragemId == lg.Liga.barragemId)
                                        {
                                            <span>@Html.Raw(lg.Liga.Nome)</span>

                                            <span class="pontuacao-circuito" style="display: @if (ViewBag.UnicoCircuitoBeachTennis) {@Html.Raw("inline-block;") } else {@Html.Raw("none;") }">
                                                <span>-</span> <span id="textoPontuacaoLiga">Selecione a pontuação: </span>
                                                <select name="pontuaLiga" id="pontuaLiga" onchange="SelecionarCircuito(this)">
                                                    <option value="-">-</option>
                                                    <option value="100" @if (ViewBag.UnicoCircuitoBeachTennis) { @Html.Raw("selected") }>100</option>
                                                    <option value="250">250</option>
                                                    <option value="500">500</option>
                                                    <option value="1000">1000</option>
                                                </select>
                                            </span>
                                        }
                                        else
                                        {
                                            <span>@Html.Raw(lg.Liga.Nome + " - Pt. " + lg.TipoTorneio)</span>
                                        }

                                    }
                                </div>
                            }
                        </div>
                    </div>
                }

                <div class="panel panel-default">
                    <div class="panel-heading">
                        <b>Marque as categorias que deseja incluir no torneio:</b><br>
                        <small style="color:red">Você poderá adicionar e editar nome de categorias depois</small><br>
                        <small><span class="glyphicon glyphicon-flag"></span> Categorias que pontuam para o ranking</small>
                    </div>
                    <div class="panel-body">
                        @foreach (var categoria in ViewBag.Categorias)
                        {
                            <div class="row">
                                <div class="col-sm-3 col-xs-8"><input type="checkbox" class="categorias" name="classes" id="classes" data-qtddtorneios="@ViewBag.qtddTorneios" data-valor="@categoria.Id" data-isLiga="@if (categoria.Ligas.Count > 0) { @Html.Raw("sim") }else{ @Html.Raw("nao") }" value="@categoria.Id"> @categoria.Nome</div>
                                @if (categoria.Ligas.Count > 0)
                                {
                                    var title = "";
                                    foreach (var item in categoria.Ligas)
                                    {
                                        title = title + item + "; ";
                                    }
                                    <div class="col-sm-2 col-xs-2">
                                        <span class="glyphicon glyphicon-flag" title="@title">
                                        </span>
                                    </div>
                                }
                                else
                                {
                                    <div class="col-sm-2 col-xs-2" id=@("flag-" + categoria.Id)></div>
                                }
                            </div>
                        }
                    </div>
                </div><a href="#tabConfigFinais" id="btnTab3" class="btn btn-info" data-toggle="tab" onclick="ValidarTab3(event, false)"><b>Avançar</b></a>
            </div>
        </div><!-- QUARTA ABA: CONFIGURAÇÕES --><div id="tabConfigFinais" class="tab-pane fade">
            <div class="box-header with-border">
                <h4 class="box-title">Configurações finais</h4>
            </div>
            <div class="box-body">
                <div class="form-group">
                    @Html.Label("O próprio jogador poderá lançar o resultado do jogo?", new { @class = "col-xs-12 col-md-12" })
                    <div class="col-xs-8 col-md-3 input-group">
                        <select name="jogadorNaoLancaResult" id="jogadorNaoLancaResult" class="form-control">
                            <option value=true>Não</option>
                            <option value=false>Sim</option>
                        </select>
                    </div>
                </div>
                <div class="form-group">
                    @Html.Label("Seu torneio será gratuito para associado?", new { @class = "col-xs-12 col-md-12" })
                    <div class="col-xs-8 col-md-3 input-group">
                        <select name="isGratuitoSocio" id="isGratuitoSocio" class="form-control">
                            <option value=false>Não</option>
                            <option value=true>Sim</option>
                        </select>
                    </div>
                </div>
                @if (Roles.IsUserInRole("adminTorneio"))
                {
                    <div class="form-group" hidden>
                        @Html.Label("Seu torneio terá repescagem?", new { @class = "col-xs-12 col-md-12" })
                        <div class="col-xs-8 col-md-3 input-group">
                            <select name="temRepescagem" id="temRepescagem" class="form-control">
                                <option value=false selected>Não</option>
                                <option value=true>Sim</option>
                            </select>
                        </div>
                    </div>
                }
                else
                {
                    <div class="form-group">
                        @Html.Label("Seu torneio terá repescagem?", new { @class = "col-xs-12 col-md-12" })
                        <div class="col-xs-8 col-md-3 input-group">
                            <select name="temRepescagem" id="temRepescagem" class="form-control">
                                <option value=false>Não</option>
                                <option value=true>Sim</option>
                            </select>
                        </div>
                    </div>
                }
                <div class="form-group">
                    @Html.Label("Seu torneio terá limite de quantidade de inscritos?", new { @class = "col-xs-12 col-md-12" })
                    <div class="col-xs-8 col-md-3 input-group">
                        <select name="temLimiteDeInscricao" id="temLimiteDeInscricao" class="form-control">
                            <option value=false>Não</option>
                            <option value=true>Sim</option>
                        </select>
                    </div>
                </div>
                <div class="form-group">
                    @Html.Label("Onde gostaria de divulgar o torneio?", new { @class = "col-xs-12 col-md-12" })
                    <div class="col-xs-8 col-md-3 input-group">
                        <select name="divulgacao" id="divulgacao" class="form-control">
                            <option value="nao divulgar">Não divulgar por enquanto</option>
                            <option value="ranking">no meu ranking</option>
                            <option value="cidade">na minha cidade</option>
                            <option value="brasil">no Brasil inteiro</option>
                        </select>
                    </div>
                </div>
                <div class="form-group">
                    @Html.Label("Caso queira colocar uma observação na ficha de inscrição, insira o texto abaixo", new { @class = "col-xs-12 col-md-12" })
                    <div class="col-sm-8 input-group">
                        @Html.TextBoxFor(model => model.observacao, new { @class = "form-control", @placeholder = "Não" })
                    </div>
                    @Html.ValidationMessageFor(model => model.observacao)
                </div>
                @if ((ViewBag.tokenPagSeguro == "") || (ViewBag.tokenPagSeguro == null))
                {
                    <br><input type="checkbox" name="cartao" id="cartao" value="true" onclick="isCartaoCredito()"> <b>Deseja aceitar inscrição via PIX com detecção automática de pagamento?</b><br>
                    <div id="isCartao">
                        <div class="editor-label">
                            <small style="color:red">Você ainda não integrou o Pagseguro - <a class="" href="/Barragens/EditPagSeguro" target="_blank">Clique aqui</a> para realizar sua inscrição.</small>
                        </div>
                    </div>
                    <script>
                        document.getElementById('isCartao').style.opacity = "0 !important";
                        document.getElementById('isCartao').style.display = "none";</script>
                }
                else
                {
                    <br><div class="editor-label"> <b>Torneio configurado para receber pagamento Via PIX com detecção automática de pagamento.</b></div>
                }
                <br>
                <input type="checkbox" name="transferencia" id="transferencia" value="true" checked onclick="isTransferenciaBancaria()"> <b>Usar transferência como forma de pagamento</b><br>
                <div id="isTransferencia">
                    <div class="editor-label">
                        <small style="color:red">Complete abaixo os dados para pagamento via transferência</small>
                    </div>

                    @Html.Partial("_PartialDadosBancariosTorneio", Model)

                </div>
                <br>
                <input type="submit" id="criarTorneio" class="btn btn-primary" value="Criar Torneio" />
            </div>
        </div>

    </div>
}
<link rel="stylesheet" href="//code.jquery.com/ui/1.12.1/themes/base/jquery-ui.css">
<style>
    .nav-tabs {
        flex-wrap: wrap;
    }

    select {
        appearance: auto;
    }

    .form-control:not(select) {
        -webkit-appearance: none;
        -moz-appearance: none;
        appearance: none;
    }

    .ui-autocomplete-loading {
        background: white url("/Content/image/ui-anim_basic_16x16.gif") right center no-repeat;
    }
</style>

@section Scripts {

    @Scripts.Render("~/bundles/editor")

    <script type="text/javascript">

        const TABS_CADASTRO = {
            BASICO: 1,
            INSCRICAO: 2,
            CLASSES: 3,
            CONFIG:4
        }

        var TabsValidas = [];
        var TabAnteriorSelecionada = 0;

        tinyMCE.baseURL = '@Url.Content("~/Scripts/tinymce/")'
        tinyMCE.init({
            selector: 'textarea#dadosBancarios',
            language: 'pt_BR',
            theme: "modern",
            theme_advanced_font_sizes: "10px,12px,13px,14px,16px,18px,20px",
            font_size_style_values: "12px,13px,14px,16px,18px,20px",
            width: 700,
            height: 150,
            toolbar1: "bold italic | underline | alignleft aligncenter alignright alignjustify | forecolor backcolor"

        });

        tinyMCE.init({
            selector: 'textarea#contato',
            menubar: false,
            language: 'pt_BR',
            theme: "modern",
            theme_advanced_font_sizes: "10px,12px,13px,14px,16px,18px,20px",
            font_size_style_values: "12px,13px,14px,16px,18px,20px",
            width: 500,
            height: 150,
            toolbar1: "bold italic | underline | alignleft aligncenter alignright alignjustify | forecolor backcolor | fontselect |  fontsizeselect"

        });

    $(function () {
        $("#dataInicio").datepicker({
            language: 'pt-BR',
            pickTime: false,
            locale: 'pt-br',
            dateFormat: 'dd/mm/yy'
        });
        $("#dataFim").datepicker({
            language: 'pt-BR',
            pickTime: false,
            locale: 'pt-br',
            dateFormat: 'dd/mm/yy'
        });
        $("#dataFimInscricoes").datepicker({
            language: 'pt-BR',
            pickTime: false,
            locale: 'pt-br',
            dateFormat: 'dd/mm/yy'
        });
        $('#valor').mask('#.##0,00', { reverse: true });
        $('#valor2').mask('#.##0,00', { reverse: true });
        $('#valor3').mask('#.##0,00', { reverse: true });
        $('#valor4').mask('#.##0,00', { reverse: true });
        $('#valorSocio').mask('#.##0,00', { reverse: true });
        $('#valorDescontoFederado').mask('#.##0,00', { reverse: true });

        $("#cidade").autocomplete({
            source: function (request, response) {
                $.ajax({
                    url: "/Cidade/getCidade",
                    dataType: "jsonp",
                    data: {
                        q: request.term
                    },
                    success: function (data) {
                        response(data);
                    }
                });
            },
            minLength: 3
        });
        $('#cidade').attr('autocomplete', 'off');

        $(".categorias").click(function (event) {
            var ligaSelecionada = false;
            var ligas = document.querySelectorAll(".ligas");
            ligas.forEach(function (lg) {
                if (lg.checked) {
                    ligaSelecionada = true;
                }
            });

            var existeLigaPropria = !!document.getElementById("pontuaLiga");
            var isLiga = $(this).data("isliga");
            var categoriaId = $(this).data("valor");
            var qtddTorneios = $(this).data("qtddtorneios");
            var check = $(this).prop("checked");
            if ((isLiga == "nao") && (check) && (qtddTorneios > 0) && (existeLigaPropria) && (ligaSelecionada)){
                $.confirm({
                    title: "",
                    content: "Deseja que esta classe pontue no seu circuito?",
                    buttons: {
                        sim: {
                            text: 'Sim',
                            btnClass: 'btn-primary',
                            action: function () {
                                $.ajax({
                                    url: "/Torneio/IncluirCategoriaNoCircuito?categoriaId=" + categoriaId,
                                    dataType: "json",
                                    contentType: "application/json; charset=utf-8",
                                    success: function (response) {
                                        if (typeof response == "object") {
                                            if (response.retorno === 0) {
                                                toastr.error(response.erro, "Erro");
                                            } else {
                                                document.getElementById('flag-' + categoriaId).innerHTML = "<span class='glyphicon glyphicon-flag' title=''></span>";
                                                toastr.success("Inclusão realizada com sucesso.", "Aviso");
                                            }
                                        }
                                    },
                                    error: function (jqXHR, textStatus, errorThrown) {
                                        toastr.error(textStatus, "Erro");
                                    }
                                });

                            }
                        },
                        cancelar: { text: 'Não' }
                    }
                });
            }

        });

        });

        $('#valor2').on('blur', function (event) {
            if (document.getElementById('valor2').value != "" && (parseInt(document.getElementById('valor2').value) < parseInt(document.getElementById('valor').value))) {
                alert("O valor da 2ª categoria não pode ser menor que o valor da 1º categoria.");
                document.getElementById('valor2').value = "";

            }
        });

        $('#valor3').on('blur', function (event) {
            if (document.getElementById('valor3').value != "" && (parseInt(document.getElementById('valor3').value) < parseInt(document.getElementById('valor').value))) {
                alert("O valor da 3ª categoria não pode ser menor que o valor da 1º categoria.");
                document.getElementById('valor3').value = "";

            }
        });

        $('#valor4').on('blur', function (event) {
            if (document.getElementById('valor4').value != "" && (parseInt(document.getElementById('valor4').value) < parseInt(document.getElementById('valor').value))) {
                alert("O valor da 4ª categoria não pode ser menor que o valor da 1º categoria.");
                document.getElementById('valor4').value = "";

            }
        });

        function CadastrarValorDescontoSocio() {
            if (document.getElementById('isDesconto').checked) {
                document.getElementById('descontoSocio').style.opacity = "1";
                document.getElementById('descontoSocio').style.display = "block";
            } else {
                document.getElementById('descontoSocio').value = "0";
                document.getElementById('descontoSocioMaisClasses').value = "0";
                document.getElementById('descontoSocio').style.opacity = "0 !important";
                document.getElementById('descontoSocio').style.display = "none";
            }
        }

        function isTransferenciaBancaria() {
            if (document.getElementById('transferencia').checked) {
                document.getElementById('isTransferencia').style.opacity = "1";
                document.getElementById('isTransferencia').style.display = "block";
            } else {
                document.getElementById('isTransferencia').style.opacity = "0 !important";
                document.getElementById('isTransferencia').style.display = "none";
            }
        }

        function isCartaoCredito() {
            if (document.getElementById('cartao').checked) {
                document.getElementById('isCartao').style.opacity = "1";
                document.getElementById('isCartao').style.display = "block";
            } else {
                document.getElementById('isCartao').style.opacity = "0 !important";
                document.getElementById('isCartao').style.display = "none";
            }
        }

        function checkCity(input) {
            //const re = /[a-zA-Z]-[A-Z][A-Z]$/;
            //if (re.test(input.value.trim())) {
            if (input.value.indexOf("-") != -1) {
                return true;
            } else {
                return false;
            }
        }

        $('[type="datatorneio"]').on("keydown", function () {
            event.preventDefault();
            return false;
        });

        function ValidarTab1(event, ehClickTab) {
            var erroValidacao = false;
            event.preventDefault();
            if (document.getElementById('nome').value == '') {
                toastr.error("Informe um nome para o seu torneio.", "Erro");
                $("#btnTab1").attr("href", "#tabPrimario");
                erroValidacao = true;
            } else if (document.forms[1].dataInicio.value == '') {
                toastr.error("Informe a data de início do seu torneio.", "Erro");
                $("#btnTab1").attr("href", "#tabPrimario");
                erroValidacao = true;
            } else if (document.forms[1].dataFim.value == '') {
                toastr.error("Informe a data de encerramento do seu torneio.", "Erro");
                $("#btnTab1").attr("href", "#tabPrimario");
                erroValidacao = true;
            } else if (document.forms[1].cidade.value == '') {
                toastr.error("Informe o nome da cidade onde ocorrerá o torneio.", "Erro");
                $("#btnTab1").attr("href", "#tabPrimario");
                erroValidacao = true;
            } else {
                if (checkCity(document.forms[1].cidade)) {
                    $("#btnTab1").attr("href", "#tabInscricao");
                    document.getElementById('tab1').className = '';
                    document.getElementById('tab2').className = 'active';
                    if (ehClickTab == false) {
                        AtualizarTabSelecionada(TABS_CADASTRO.INSCRICAO);
                    }
                } else {
                    toastr.error("Digite as primeiras letras da sua cidade e selecione-a da lista oferecida.", "Erro");
                    document.forms[1].cidade.value = "";
                    document.forms[1].cidade.focus();
                    $("#btnTab1").attr("href", "#tabPrimario");
                    erroValidacao = true;
                }
            }
            $('html,body').scrollTop(0);

            return erroValidacao == false;
        };

        function ValidarRegraTab1() {
            var erroValidacao = false;
            if (document.getElementById('nome').value == '') {
                erroValidacao = true;
            } else if (document.forms[1].dataInicio.value == '') {
                erroValidacao = true;
            } else if (document.forms[1].dataFim.value == '') {
                erroValidacao = true;
            } else if (document.forms[1].cidade.value == '') {
                erroValidacao = true;
            } else {
                if (checkCity(document.forms[1].cidade)) {
                    erroValidacao = false;
                } else {
                    erroValidacao = true;
                }
            }
            return erroValidacao == false;
        };

        function ValidarTab2(event, ehClickTab) {
            var erroValidacao = false;
            event.preventDefault();
            if (document.forms[1].dataFimInscricoes.value == '') {
                toastr.error("Informe a data de encerramento das inscrições.", "Erro");
                $("#btnTab2").attr("href", "#tabInscricao");
                erroValidacao = true;
            } else if ((document.getElementById('qtddCategoriasPorJogador').value == 1) && (document.getElementById('valor').value == "")) {
                toastr.error("Informe o valor da inscrição.", "Erro");
                $("#btnTab2").attr("href", "#tabInscricao");
                erroValidacao = true;
            } else if ((document.getElementById('qtddCategoriasPorJogador').value == 2) && ((document.getElementById('valor').value == "") || (document.getElementById('valor2').value == ""))) {
                toastr.error("Informe todos os valores das inscrições.", "Erro");
                $("#btnTab2").attr("href", "#tabInscricao");
                erroValidacao = true;
            } else if ((document.getElementById('qtddCategoriasPorJogador').value == 3) && ((document.getElementById('valor').value == "") || (document.getElementById('valor2').value == "") || (document.getElementById('valor3').value == ""))) {
                toastr.error("Informe todos os valores das inscrições.", "Erro");
                $("#btnTab2").attr("href", "#tabInscricao");
                erroValidacao = true;
            } else if ((document.getElementById('qtddCategoriasPorJogador').value == 4) && ((document.getElementById('valor').value == "") || (document.getElementById('valor2').value == "") || (document.getElementById('valor3').value == "") || (document.getElementById('valor4').value == ""))) {
                toastr.error("Informe todos os valores das inscrições.", "Erro");
                $("#btnTab2").attr("href", "#tabInscricao");
                erroValidacao = true;
            } else {
                $("#btnTab2").attr("href", "#tabClasse");
                document.getElementById('tab2').className = '';
                document.getElementById('tab3').className = 'active';
                if (ehClickTab == false) {
                    AtualizarTabSelecionada(TABS_CADASTRO.CLASSES);
                }
            }
            $('html,body').scrollTop(0);

            return erroValidacao == false;
        };

        function ValidarRegraTab2() {
            var erroValidacao = false;

            if (document.forms[1].dataFimInscricoes.value == '') {
                erroValidacao = true;
            } else if ((document.getElementById('qtddCategoriasPorJogador').value == 1) && (document.getElementById('valor').value == "")) {
                erroValidacao = true;
            } else if ((document.getElementById('qtddCategoriasPorJogador').value == 2) && ((document.getElementById('valor').value == "") || (document.getElementById('valor2').value == ""))) {
                erroValidacao = true;
            } else if ((document.getElementById('qtddCategoriasPorJogador').value == 3) && ((document.getElementById('valor').value == "") || (document.getElementById('valor2').value == "") || (document.getElementById('valor3').value == ""))) {
                erroValidacao = true;
            } else if ((document.getElementById('qtddCategoriasPorJogador').value == 4) && ((document.getElementById('valor').value == "") || (document.getElementById('valor2').value == "") || (document.getElementById('valor3').value == "") || (document.getElementById('valor4').value == ""))) {
                erroValidacao = true;
            } else {
                erroValidacao = false;
            }
            return erroValidacao == false;
        };

        function ValidarTab3(event, ehClickTab) {
            var erroValidacao = false;
            event.preventDefault();

            var listLigas = document.getElementsByClassName('ligas');
            for (let item of listLigas) {
				try {
					if (item.checked == true) {
                        var select = item.nextElementSibling.nextElementSibling.firstElementChild.nextElementSibling.nextElementSibling;
						if (select.value == '-') {
							toastr.error("Selecione a pontuação do circuito escolhido.", "Erro");
							$("#btnTab3").attr("href", "#tabClasse");
							erroValidacao = true;
						}
					}
				}
				catch (e) {
				   console.log("Erro ao ler valor selecionado do item " + item.value)
				}
            }

            if (erroValidacao) {
                $("#btnTab3").attr("href", "#tabClasse");
            } else {
                $("#btnTab3").attr("href", "#tabConfigFinais");
                document.getElementById('tab3').className = '';
                document.getElementById('tab4').className = 'active';
                if (ehClickTab == false) {
                    AtualizarTabSelecionada(TABS_CADASTRO.CONFIG);
                }
            }

            $('html,body').scrollTop(0);

            return erroValidacao == false;
        };

        function ValidarRegraTab3() {
            var erroValidacao = false;

            var listLigas = document.getElementsByClassName('ligas');
            for (let item of listLigas) {

				try {
					if (item.checked == true) {
                        var select = item.nextElementSibling.nextElementSibling.firstElementChild.nextElementSibling.nextElementSibling;
						if (select.value == '-') {
							erroValidacao = true;
						}
					}
				}
				catch (e) {
				   console.log("Erro ao ler valor selecionado do item " + item.value)
				}
            }
            return erroValidacao == false;
        };

        function ValidarTabAnterior(event, tabSelecionada) {
            var resultadoValidacaoTabAnterior;

            var resultadoValidacaoTabSelecionada = ChecarTabDadosValidos(tabSelecionada);;

            if (resultadoValidacaoTabSelecionada == true && TabsValidas.indexOf(tabSelecionada) >= 0) {
                document.getElementById(ObterNomeDiv(TabAnteriorSelecionada)).className = 'tab-pane fade';
                document.getElementById(ObterNomeDiv(tabSelecionada)).className = 'tab-pane fade active in';
                AtualizarTabSelecionada(tabSelecionada);
            }
            else {
                if (TabAnteriorSelecionada == TABS_CADASTRO.BASICO) {
                    resultadoValidacaoTabAnterior = ValidarTab1(event,true);
                }
                else if (TabAnteriorSelecionada == TABS_CADASTRO.INSCRICAO) {
                    resultadoValidacaoTabAnterior = ValidarTab2(event,true);
                }
                else if (TabAnteriorSelecionada == TABS_CADASTRO.CLASSES) {
                    resultadoValidacaoTabAnterior = ValidarTab3(event,true);
                }
                else if (TabAnteriorSelecionada == TABS_CADASTRO.CONFIG) {
                    resultadoValidacaoTabAnterior = true;
                }

                var tabAnteriorAClicada = ObterTabAnterior(tabSelecionada);
                tabAnteriorEhValida = ChecarTabDadosValidos(tabAnteriorAClicada);

                if (tabAnteriorEhValida == false && tabAnteriorAClicada != TabAnteriorSelecionada) {
                    ExibirMensagemTabDadosInvalidos(tabAnteriorAClicada);
                }

                if (resultadoValidacaoTabAnterior == false || tabAnteriorEhValida == false) {
                    ChecarTabsValidas();
                    SelecionarTab(TabAnteriorSelecionada);
                    event.stopPropagation();
                }
                else {
                    SelecionarTab(tabSelecionada);
                    document.getElementById(ObterNomeDiv(TabAnteriorSelecionada)).className = 'tab-pane fade';
                    document.getElementById(ObterNomeDiv(tabSelecionada)).className = 'tab-pane fade active in';
                    AtualizarTabSelecionada(tabSelecionada);
                }
            }
        }

        function ExibirMensagemTabDadosInvalidos(tab) {
            if (tab == TABS_CADASTRO.BASICO) {
                toastr.error("A aba Básico contém dados inválidos!", "Erro");
            }
            else if (tab == TABS_CADASTRO.INSCRICAO) {
                toastr.error("A aba Inscrição contém dados inválidos!", "Erro");
            }
            else if (tab == TABS_CADASTRO.CLASSES) {
                toastr.error("A aba Classes contém dados inválidos!", "Erro");
            }
            else if (tab == TABS_CADASTRO.CONFIG) {
                toastr.error("A aba Config contém dados inválidos!", "Erro");
            }
        }

        function SelecionarTab(tab) {
            for (var i = 1; i <= 4; i++) {
                if (tab == i) {
                    document.getElementById(ObterNomeTab(i)).className = 'active';
                }
                else {
                    document.getElementById(ObterNomeTab(i)).className = '';
                }
            }
        }

        function ObterTabAnterior(tabSelecionada) {
            if (tabSelecionada <= 1) {
                return 1;
            }
            else {
                return tabSelecionada - 1;
            }
        }

        function ChecarTabDadosValidos(tabSelecionada) {
            var resultadoValidacao;
            if (tabSelecionada == TABS_CADASTRO.BASICO) {
                resultadoValidacao = ValidarRegraTab1();
            }
            else if (tabSelecionada == TABS_CADASTRO.INSCRICAO) {
                resultadoValidacao = ValidarRegraTab2();
            }
            else if (tabSelecionada == TABS_CADASTRO.CLASSES) {
                resultadoValidacao = ValidarRegraTab3();
            }
            else if (tabSelecionada == TABS_CADASTRO.CONFIG) {
                resultadoValidacao = TabsValidas.length == 3;
            }
            return resultadoValidacao;
        }

        function AtualizarTabSelecionada(tabSelecionada) {
            if (TabsValidas.indexOf(TabAnteriorSelecionada) < 0) {
                if (ChecarTabDadosValidos(TabAnteriorSelecionada)) {
                    TabsValidas.push(TabAnteriorSelecionada);
                }
            }
            ChecarTabsValidas();
            TabAnteriorSelecionada = tabSelecionada;
        }

        function ChecarTabsValidas() {
            if (TabsValidas != null) {
                if (ValidarItemInvalidoTabsValidas(TABS_CADASTRO.BASICO)) {
                    TabsValidas.splice(TabsValidas.indexOf(TABS_CADASTRO.BASICO), 1);
                }
                if (ValidarItemInvalidoTabsValidas(TABS_CADASTRO.INSCRICAO)) {
                    TabsValidas.splice(TabsValidas.indexOf(TABS_CADASTRO.INSCRICAO), 1);
                }
                if (ValidarItemInvalidoTabsValidas(TABS_CADASTRO.CLASSES)) {
                    TabsValidas.splice(TabsValidas.indexOf(TABS_CADASTRO.CLASSES), 1);
                }
                if (ValidarItemInvalidoTabsValidas(TABS_CADASTRO.CONFIG)) {
                    TabsValidas.splice(TabsValidas.indexOf(TABS_CADASTRO.CONFIG), 1);
                }
            }
        }

        function ValidarItemInvalidoTabsValidas(tab) {
            if (TabsValidas.indexOf(tab) >= 0) {
                if (ChecarTabDadosValidos(tab) == false) {
                    return true;
                }
            }
            return false;
        }


        function ObterNomeTab(tabId) {
            if (tabId == TABS_CADASTRO.BASICO) {
                return "tab1";
            }
            else if (tabId == TABS_CADASTRO.INSCRICAO) {
                return "tab2";
            }
            else if (tabId == TABS_CADASTRO.CLASSES) {
                return "tab3";
            }
            else if (tabId == TABS_CADASTRO.CONFIG) {
                return "tab4";
            }
        }

        function ObterNomeDiv(tabId) {
            if (tabId == TABS_CADASTRO.BASICO) {
                return "tabPrimario";
            }
            else if (tabId == TABS_CADASTRO.INSCRICAO) {
                return "tabInscricao";
            }
            else if (tabId == TABS_CADASTRO.CLASSES) {
                return "tabClasse";
            }
            else if (tabId == TABS_CADASTRO.CONFIG) {
                return "tabConfigFinais";
            }
        }

        function habilibarValoresInscricao() {
            if (document.getElementById('qtddCategoriasPorJogador').value == 1) {
                document.getElementById('valor2').value = "0";
                document.getElementById('valorDiv2').style.opacity = "0 !important";
                document.getElementById('valorDiv2').style.display = "none";
                document.getElementById('valor3').value = "0";
                document.getElementById('valorDiv3').style.opacity = "0 !important";
                document.getElementById('valorDiv3').style.display = "none";
                document.getElementById('valor4').value = "0";
                document.getElementById('valorDiv4').style.opacity = "0 !important";
                document.getElementById('valorDiv4').style.display = "none";
            } else if (document.getElementById('qtddCategoriasPorJogador').value == 2) {
                document.getElementById('valor2').value = ""
                document.getElementById('valorDiv2').style.opacity = "1";
                document.getElementById('valorDiv2').style.display = "block";
                document.getElementById('valor3').value = "0";
                document.getElementById('valorDiv3').style.opacity = "0 !important";
                document.getElementById('valorDiv3').style.display = "none";
                document.getElementById('valor4').value = "0";
                document.getElementById('valorDiv4').style.opacity = "0 !important";
                document.getElementById('valorDiv4').style.display = "none";
            } else if (document.getElementById('qtddCategoriasPorJogador').value == 3) {
                document.getElementById('valor2').value = ""
                document.getElementById('valor3').value = ""
                document.getElementById('valorDiv2').style.opacity = "1";
                document.getElementById('valorDiv2').style.display = "block";
                document.getElementById('valorDiv3').style.opacity = "1";
                document.getElementById('valorDiv3').style.display = "block";
                document.getElementById('valor4').value = "0";
                document.getElementById('valorDiv4').style.opacity = "0 !important";
                document.getElementById('valorDiv4').style.display = "none";
            } else if (document.getElementById('qtddCategoriasPorJogador').value == 4) {
                document.getElementById('valor2').value = ""
                document.getElementById('valor3').value = ""
                document.getElementById('valor4').value = ""
                document.getElementById('valorDiv2').style.opacity = "1";
                document.getElementById('valorDiv2').style.display = "block";
                document.getElementById('valorDiv3').style.opacity = "1";
                document.getElementById('valorDiv3').style.display = "block";
                document.getElementById('valorDiv4').style.opacity = "1";
                document.getElementById('valorDiv4').style.display = "block";
            }
        }

        //document.getElementById('descontoSocio').style.opacity = "0";
        //document.getElementById('descontoSocio').style.display = "none";

        habilibarValoresInscricao()

        function inputCheckboxSelectPontos(input) {
            if (input.checked == true) {
                span = input.nextElementSibling.nextElementSibling;
                if (span.classList.contains('pontuacao-circuito')) {
                    span.style.display = 'inline-block';
                }

                var spanSelecione = input.nextElementSibling.nextElementSibling.firstElementChild.nextElementSibling;
                if (obterValorComboCircuito(input) == "-") {
                    spanSelecione.style.color = "#ff0000";
                }
                else {
                    spanSelecione.style.color = "#000000";
                }

            } else {
                span = input.nextElementSibling.nextElementSibling;
                span.style.display = 'none';
            }
        }

        function SelecionarCircuito(input) {
            document.getElementById('pontuacaoLiga').value = input.value

            var spanSelecione = input.previousElementSibling;
            if (input.value == "-") {
                spanSelecione.style.color = "#ff0000";
            }
            else {
                spanSelecione.style.color = "#000000";
            }
        }

        function obterValorComboCircuito(item) {
            try {
                var select = item.nextElementSibling.nextElementSibling.firstElementChild.nextElementSibling.nextElementSibling;
                return select.value;
            }
            catch (e) {
                return "-";
            }
        }


        AtualizarTabSelecionada(TABS_CADASTRO.BASICO);

    </script>

}


