@model Barragem.Models.Torneio

@Html.Partial("_PartialTabs", "")

<div class="tab-content">
    <div class="tab-pane fade in active" id="tabCadastro">
        @using (Html.BeginForm("Edit", "Torneio", FormMethod.Post, new { @class = "form-horizontal" }))
        {
            @Html.AntiForgeryToken()
            @Html.ValidationSummary(true)
            <div class="box-body">
                @if (Model.isAtivo)
                {
                    <div class="form-group">
                        @Html.Label("Link do Torneio", new { @class = "col-sm-2 control-label" })
                        <div class="col-sm-8 input-group">
                            <a href="/torneio-@Model.barragem.dominio" title="Link do torneio" class="btn btn-default btn-xs">
                                <span class="glyphicon glyphicon-link"></span>
                            </a>
                        </div>
                    </div>

                }
                <div class="form-group">
                    @Html.LabelFor(model => model.nome, new { @class = "col-sm-2 control-label" })
                    <div class="col-sm-8 input-group">
                        @Html.TextBoxFor(model => model.nome, new { @class = "form-control" })
                        @Html.HiddenFor(model => model.TipoTorneio)
                    </div>
                    @Html.ValidationMessageFor(model => model.nome)
                </div>
                <div class="form-group">
                    @Html.LabelFor(model => model.dataInicio, new { @class = "col-sm-2 control-label" })
                    <div class="col-sm-4 input-group date" id="dataInicio" data-date-format="dd/mm/yyyy">
                        <input type="text" name="dataInicio" id="dataInicio" value="@Model.dataInicio.ToShortDateString()" class="form-control" readonly="readonly" />
                        <span class="input-group-addon">
                            <span class="glyphicon glyphicon-calendar">
                            </span>
                        </span>
                    </div>
                    @Html.ValidationMessageFor(model => model.dataInicio)
                </div>
                <div class="form-group">
                    @Html.LabelFor(model => model.dataFim, new { @class = "col-sm-2 control-label" })
                    <div class="col-sm-4 input-group date" id="dataFim" data-date-format="dd/mm/yyyy">
                        <input type="text" name="dataFim" id="dataFim" value="@Model.dataFim.ToShortDateString()" class="form-control" readonly="readonly" />
                        <span class="input-group-addon">
                            <span class="glyphicon glyphicon-calendar">
                            </span>
                        </span>
                    </div>
                    @Html.ValidationMessageFor(model => model.dataFim)
                </div>
                <div class="form-group">
                    @Html.LabelFor(model => model.dataFimInscricoes, new { @class = "col-sm-2 control-label" })
                    <div class="col-sm-4 input-group date" id="dataFimInscricoes" data-date-format="dd/mm/yyyy">
                        <input type="text" name="dataFimInscricoes" id="dataFimInscricoes" value="@Model.dataFimInscricoes.ToShortDateString()" class="form-control" readonly="readonly" />
                        <span class="input-group-addon">
                            <span class="glyphicon glyphicon-calendar">
                            </span>
                        </span>
                    </div>
                    @Html.ValidationMessageFor(model => model.dataFimInscricoes)
                </div>
                <div class="form-group">
                    @Html.LabelFor(model => model.cidade, new { @class = "col-sm-2 control-label" })
                    <div class="col-sm-8 input-group">
                        @Html.TextBoxFor(model => model.cidade, new { @class = "form-control" })
                    </div>
                    @Html.ValidationMessageFor(model => model.cidade)
                </div>
                <div class="form-group">
                    @Html.LabelFor(model => model.local, new { @class = "col-sm-2 control-label" })
                    <div class="col-sm-8 input-group">
                        @Html.TextBoxFor(model => model.local, new { @class = "form-control" })
                    </div>
                    @Html.ValidationMessageFor(model => model.local)
                </div>
                <div class="form-group">
                    @Html.Label("Em quantas categorias o jogador poderá se inscrever?", new { @class = "col-sm-2 control-label" })
                    <div class="col-sm-6 input-group">
                        <select name="qtddCategoriasPorJogador" id="qtddCategoriasPorJogador" class="form-control" onchange="habilibarValoresInscricao()">
                            <option value="1" @if (Model.qtddCategoriasPorJogador == 1) { @Html.Raw(" selected ") }>1 categoria</option>
                            <option value="2" @if (Model.qtddCategoriasPorJogador == 2) { @Html.Raw(" selected ") }>2 categoria</option>
                            <option value="3" @if (Model.qtddCategoriasPorJogador == 3) { @Html.Raw(" selected ") }>3 categoria</option>
                            <option value="4" @if (Model.qtddCategoriasPorJogador == 4) { @Html.Raw(" selected ") }>4 categoria</option>
                        </select>
                    </div>
                </div>
                <div id="valorDiv" class="form-group">
                    @Html.Label("Valor da inscrição para 1 categoria", new { @class = "col-sm-2 control-label" })
                    <div class="col-sm-4 input-group">
                        @Html.TextBoxFor(model => model.valor, new { @class = "form-control", @placeholder = "Informe 0 para torneio gratuito" })
                    </div>
                    @Html.ValidationMessageFor(model => model.valor)
                </div>
                <div id="valorDiv2" class="form-group">
                    @Html.Label("Valor da inscrição para 2 categoria", new { @class = "col-sm-2 control-label" })
                    <div class="col-sm-4 input-group">
                        @Html.TextBoxFor(model => model.valor2, new { @class = "form-control" })
                    </div>
                    @Html.ValidationMessageFor(model => model.valor2)
                </div>
                <div id="valorDiv3" class="form-group">
                    @Html.Label("Valor da inscrição para 3 categoria", new { @class = "col-sm-2 control-label" })
                    <div class="col-sm-4 input-group">
                        @Html.TextBoxFor(model => model.valor3, new { @class = "form-control" })
                    </div>
                    @Html.ValidationMessageFor(model => model.valor3)
                </div>
                <div id="valorDiv4" class="form-group">
                    @Html.Label("Valor da inscrição para 4 categoria", new { @class = "col-sm-2 control-label" })
                    <div class="col-sm-4 input-group">
                        @Html.TextBoxFor(model => model.valor4, new { @class = "form-control"})
                    </div>
                    @Html.ValidationMessageFor(model => model.valor4)
                </div>
                <div class="form-group">
                    <div class="col-sm-offset-2 col-sm-6">
                        <div class="checkbox">
                            <label>
                                @if (Model.isDesconto != null && (bool)Model.isDesconto)
                                {
                                    <input type="checkbox" checked value="true" name="isDesconto" id="isDesconto" onclick="CadastrarValorDescontoSocio()" /> 
                                }
                                else
                                {
                                    <input type="checkbox" value="true" name="isDesconto" id="isDesconto" onclick="CadastrarValorDescontoSocio()" /> 
                                }
                                @Html.Raw("Tem desconto para ") <select name="descontoPara">
                                <option @if (Model.descontoPara!=null && Model.descontoPara.Equals("sócio")){ @Html.Raw("selected")} value="sócio">sócio</option>
                                <option @if (Model.descontoPara!=null && Model.descontoPara.Equals("barragista")){ @Html.Raw("selected")} value="barragista">barragista</option>
                                </select>
                            </label>
                        </div>
                    </div>
                </div>
                <div id="descontoSocio" class="form-group">
                    @Html.Label("Valor de desconto", new { @class = "col-sm-2 control-label" })
                    <div class="col-sm-4 input-group">
                        @Html.TextBoxFor(model => model.valorSocio, new { @class = "form-control" })
                    </div>
                    @Html.ValidationMessageFor(model => model.valorSocio)
                </div>
                <div class="form-group">
                    @Html.LabelFor(model => model.valorDescontoFederado, new { @class = "col-sm-2 control-label" })
                    <div class="col-sm-8 input-group">
                        @Html.TextBoxFor(model => model.valorDescontoFederado, new { @class = "form-control", @placeholder = "Informar valor caso haja desconto" })
                    </div>
                    @Html.ValidationMessageFor(model => model.valorDescontoFederado)
                </div>
                <div class="form-group">
                    @Html.LabelFor(model => model.premiacao, new { @class = "col-sm-2 control-label" })
                    <div class="col-sm-8 input-group">
                        @Html.TextBoxFor(model => model.premiacao, new { @class = "form-control", @placeholder = "" })
                    </div>
                    @Html.ValidationMessageFor(model => model.premiacao)
                </div>
                <div class="form-group">
                    <label class="col-sm-2 control-label" for="premiacao">Configurações</label>
                    <div class="col-sm-3">
                        <div class="checkbox">
                            <label>
                                @Html.CheckBoxFor(model => model.isAtivo) Ativo
                            </label>
                        </div>
                    </div>
                    <div class="col-sm-3">
                        <div class="checkbox">
                            <label>
                                @Html.CheckBoxFor(model => model.isOpen) Divulgação geral
                            </label>
                        </div>
                    </div>
                    <div class="col-sm-3">
                        <div class="checkbox">
                            <label>
                                @Html.CheckBoxFor(model => model.divulgaCidade, new { @checked = "checked" }) Divulgar apenas na cidade
                            </label>
                        </div>
                    </div>
                    <div class="col-sm-offset-2 col-sm-3">
                        <div class="checkbox">
                            <label>
                                @Html.CheckBoxFor(model => model.temRepescagem) Tem Repescagem
                            </label>
                        </div>
                    </div>
                    <div class="col-sm-3">
                        <div class="checkbox">
                            <label>
                                @Html.CheckBoxFor(model => model.liberaTabelaInscricao) Liberar Tabela de Inscritos
                            </label>
                        </div>
                    </div>
                    <div class="col-sm-3">
                        <div class="checkbox">
                            <label>
                                @Html.CheckBoxFor(model => model.liberarTabela) Liberar Tabela de Jogos
                            </label>
                        </div>
                    </div>
                    <div class="col-sm-offset-2 col-sm-3">
                        <div class="checkbox">
                            <label>
                                @Html.CheckBoxFor(model => model.jogadorNaoLancaResult) Jogador NÃO pode lançar resultado
                            </label>
                        </div>
                    </div>
                    <div class="col-sm-3">
                        <div class="checkbox">
                            <label>
                                @Html.CheckBoxFor(model => model.liberarEscolhaDuplas) Liberar escolha de duplas
                            </label>
                        </div>
                    </div>
                    <div class="col-sm-3">
                        <div class="checkbox">
                            <label>
                                @Html.CheckBoxFor(model => model.isGratuitoSocio) Gratuito para associado
                            </label>
                        </div>
                    </div>

                </div>

                @if (Roles.IsUserInRole("admin"))
                {
                    <div class="form-group">
                        @Html.LabelFor(model => model.barragem, new { @class = "col-sm-2 control-label" })
                        <div class="col-sm-6 input-group">
                            @Html.DropDownList("barragemId", null, new { @class = "form-control" })
                        </div>
                        @Html.ValidationMessageFor(model => model.barragemId)
                    </div>
                }
                else
                {
                    <input type="hidden" name="barragemId" value="@ViewBag.barraId" />
                }

                @if (ViewBag.LigasDoTorneio.Count > 0)
                {
                    <div class="panel panel-primary">
                        <div class="panel-heading">Este torneio conta pontos para a(s) liga(s) abaixo (verifique a aba: "Classes"):</div>
                        <div class="panel-body">
                            @foreach (var liga in ViewBag.LigasDoTorneio)
                            {
                                <p>- @liga.Nome</p>
                            }
                        </div>
                    </div>

                    
                }
                <div class="form-group">
                    @Html.LabelFor(model => model.observacao, new { @class = "col-sm-2 control-label" })
                    <div class="col-sm-8 input-group">
                        @Html.TextBoxFor(model => model.observacao, new { @class = "form-control" })
                    </div>
                    @Html.ValidationMessageFor(model => model.observacao)
                </div>
                <div class="editor-label">
                    @Html.LabelFor(model => model.dadosBancarios)
                </div>
                <div class="editor-field">
                    @Html.TextAreaFor(model => model.dadosBancarios)
                    @Html.ValidationMessageFor(model => model.dadosBancarios)
                </div>
            </div>
            <!-- /.box-body -->
            <div class="box-footer">
                <a href="@Url.Action("Index")" title="Voltar" class="btn btn-default">Voltar</a>
                <button type="submit" class="btn btn-info pull-right">Gravar</button>
            </div>

        }

    </div>

    <div class="tab-pane fade" id="tabClasses">
        <br>
        <button type="button" onclick="saveJogadoresAlterados()" class="btn btn-info">Gravar</button>

        <div class="box-body">
            @{
                List<Barragem.Models.InscricaoTorneio> inscricaoTorneio = ViewBag.JogadoresClasses;
            }
            @for (int i = 1; i <= Model.qtddClasses; i++)
            {
                var ulId = "sortable" + i;
                var nivel = i;
                var qtddAtleta = "qtddAtleta" + i;
                <div class="col-md-2">
                    <div class="box box-primary">
                        <div class="with-border">
                            <h4 class="sortable-title">Classe @nivel - Qtdd:<span id="@qtddAtleta">@inscricaoTorneio.Where(r => r.classe == nivel).Count()</span></h4>
                        </div>
                        <ul id="@ulId" class="connectedSortable">
                            @foreach (var item in inscricaoTorneio)
                            {
                                if (item.classe == nivel)
                                {
                                    var liClass = "ui-state-classe" + nivel;
                                    <li class="@liClass" title="@item.participante.nome">
                                        <input type="hidden" value="@item.Id" name="Id">
                                        <input type="hidden" value="@item.classe" name="classeId">
                                        @{var nome = item.participante.nome;
                                            if (nome.Length > 14)
                                            {
                                                nome = item.participante.nome.Substring(0, 15) + "...";
                                            }
                                        }
                                        @Html.Raw(nome)
                                    </li>
                                }
                                else if (item.classe > nivel)
                                {
                                    break;
                                }
                            }
                        </ul>
                    </div>
                </div>
            }
        </div>
        <div class="box-footer">
            <button type="button" onclick="saveJogadoresAlterados()" class="btn btn-info">Gravar</button>
        </div>
    </div>

    <div class="tab-pane fade" id="tabInscritos"></div>
    <div class="tab-pane fade" id="tabJogos"></div>
    <div class="tab-pane fade" id="tabEditClasses"></div>
</div>
@section Scripts {
    @Scripts.Render("~/bundles/editor")
    <script type="text/javascript">
        tinyMCE.baseURL = '@Url.Content("~/Scripts/tinymce/")'
        tinyMCE.init({
            selector: 'textarea#dadosBancarios',
            language: 'pt_BR',
            theme: "modern",
            theme_advanced_font_sizes: "10px,12px,13px,14px,16px,18px,20px",
            font_size_style_values: "12px,13px,14px,16px,18px,20px",
            width: 700,
            height: 150,
            toolbar1: "bold italic | underline | alignleft aligncenter alignright alignjustify | forecolor backcolor | fontselect |  fontsizeselect"

        });
        $(function () {
            $("#dataInicio").datepicker({
                language: 'pt-BR',
                pickTime: false
            });
            $("#dataFim").datepicker({
                language: 'pt-BR',
                pickTime: false
            });
            $("#dataFimInscricoes").datepicker({
                language: 'pt-BR',
                pickTime: false
            });

            $("#sortable1, #sortable2, #sortable3, #sortable4").sortable({
                connectWith: ".connectedSortable",
                stop: function (e, ui) {
                    for (i = 1; i < 6; i++) {
                        var cont = 0;
                        var classe = "#sortable" + i + " li";
                        $.each($(classe), function (key, val) {
                            cont++
                        });
                        var idDiv = "#qtddAtleta" + i
                        $(idDiv).html(cont);
                    }
                }
            }).disableSelection();

            $("#sortable5").sortable({
                connectWith: ".connectedSortable",
                stop: function (e, ui) {
                    for (i = 1; i < 6; i++) {
                        var cont = 0;
                        var classe = "#sortable" + i + " li";
                        $.each($(classe), function (key, val) {
                            cont++
                        });
                        var idDiv = "#qtddAtleta" + i
                        $(idDiv).html(cont);
                    }
                }
            }).disableSelection();
        });

        function getJogadoresAlterados() {
            var newData = new Array();
            for (i = 1; i < 6; i++) {
                var classe = "#sortable" + i + " li";
                $.each($(classe), function (key, val) {
                    var id = $(this).find("input[name=Id]").val();
                    var classeId = $(this).find("input[name=classeId]").val();
                    var fileldValues = {};
                    if (classeId != i) {
                        fileldValues['Id'] = id;
                        fileldValues['classe'] = i;
                        newData.push(fileldValues);
                    }
                });
            }
            return JSON.stringify({ 'inscricaoTorneio': newData });
        }

        function atualizarListaClasses() {
            var newData = new Array();
            for (i = 1; i < 6; i++) {
                var classe = "#sortable" + i + " li";
                $.each($(classe), function (key, val) {
                    var classeId = $(this).find("input[name=classeId]").val();
                    if (classeId != i) {
                        var toggle = "ui-state-classe" + classeId + " ui-state-classe" + i
                        $(this).toggleClass(toggle);
                        $(this).find("input[name=classeId]").val(i);
                    }
                });
            }
            return JSON.stringify({ 'inscricaoTorneio': newData });
        }

        function saveJogadoresAlterados() {
            var inscricaoTorneio = getJogadoresAlterados();
            $.ajax({
                type: "POST",
                url: "/Torneio/AlterarClassesTorneio",
                dataType: "json",
                data: inscricaoTorneio,
                contentType: "application/json; charset=utf-8",
                success: function (response) {
                    if (typeof response == "object") {
                        if (response.retorno === 0) {
                            toastr.error(response.erro, "Erro");
                        } else {
                            toastr.success("Atualização realizada com sucesso.", "Aviso");
                            atualizarListaClasses();
                        }
                    }
                },
                error: function (jqXHR, textStatus, errorThrown) {
                    location.reload(true);
                }
            });
        }

        function CadastrarValorDescontoSocio() {
            if (document.getElementById('isDesconto').checked) {
                document.getElementById('descontoSocio').style.opacity = "1";
                document.getElementById('descontoSocio').style.display = "block";
            } else {
                document.getElementById('valorSocio').value = "0";
                document.getElementById('valorMaisClassesSocio').value = "0";
                document.getElementById('descontoSocio').style.opacity = "0 !important";
                document.getElementById('descontoSocio').style.display = "none";
            }
        }

        function habilibarValoresInscricao() {
            if (document.getElementById('qtddCategoriasPorJogador').value == 1) {
                document.getElementById('valor2').value = "0";
                document.getElementById('valorDiv2').style.opacity = "0 !important";
                document.getElementById('valorDiv2').style.display = "none";
                document.getElementById('valor3').value = "0";
                document.getElementById('valorDiv3').style.opacity = "0 !important";
                document.getElementById('valorDiv3').style.display = "none";
                document.getElementById('valor4').value = "0";
                document.getElementById('valorDiv4').style.opacity = "0 !important";
                document.getElementById('valorDiv4').style.display = "none";
            } else if (document.getElementById('qtddCategoriasPorJogador').value == 2) {
                document.getElementById('valorDiv2').style.opacity = "1";
                document.getElementById('valorDiv2').style.display = "block";
                document.getElementById('valor3').value = "0";
                document.getElementById('valorDiv3').style.opacity = "0 !important";
                document.getElementById('valorDiv3').style.display = "none";
                document.getElementById('valor4').value = "0";
                document.getElementById('valorDiv4').style.opacity = "0 !important";
                document.getElementById('valorDiv4').style.display = "none";
            } else if (document.getElementById('qtddCategoriasPorJogador').value == 3) {
                document.getElementById('valorDiv2').style.opacity = "1";
                document.getElementById('valorDiv2').style.display = "block";
                document.getElementById('valorDiv3').style.opacity = "1";
                document.getElementById('valorDiv3').style.display = "block";
                document.getElementById('valor4').value = "0";
                document.getElementById('valorDiv4').style.opacity = "0 !important";
                document.getElementById('valorDiv4').style.display = "none";
            } else if (document.getElementById('qtddCategoriasPorJogador').value == 4) {
                document.getElementById('valorDiv2').style.opacity = "1";
                document.getElementById('valorDiv2').style.display = "block";
                document.getElementById('valorDiv3').style.opacity = "1";
                document.getElementById('valorDiv3').style.display = "block";
                document.getElementById('valorDiv4').style.opacity = "1";
                document.getElementById('valorDiv4').style.display = "block";
            }
        }

        if (!document.getElementById('isDesconto').checked) {
            document.getElementById('descontoSocio').style.opacity = "0";
            document.getElementById('descontoSocio').style.display = "none";
        }

        habilibarValoresInscricao()
    </script>
}
