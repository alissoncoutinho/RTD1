@{
    int i = 0;
}
@model IEnumerable<Barragem.Models.CabecaChaveModel>
    @Html.Partial("_PartialTabs")

    <div class="tab-content">
        <div class="tab-pane fade in active" id="tabCabecaChave">
            <div class="box box-primary">
                <div class="box-header">
                    <h4 class="box-title">Ações de cabeça de chave</h4>
                </div>
                <p style="margin-top:10px">
                    <div class="form-row">
                        <button type="button" id="btnImportarCabecaChave" class="btn btn-info"
                                data-toggle="modal" data-target="#modalImportarCabecaChave" onclick="abrirModalImportarCabecaChave()">
                            Importar cabeças chave
                        </button>
                    </div>
                </p>

                <div class="box box-primary" style="margin-top: 25px;">
                    <div class="box-header">
                        <h4 class="box-title">Filtro de cabeça de chave</h4>
                    </div>

                    <div class="form-row">
                        <input type="hidden" value="@ViewBag.TorneioId" name="torneioId" id="torneioId">

                        <div class="form-group col-sm-3 filtros">
                            <select name="filtroClasse" id="filtroClasse" class="form-control" onchange="Selecionar()">
                                @foreach (var item2 in ViewBag.Classes)
                                {
                                    <option value="@item2.Id" @if (ViewBag.filtroClasse == item2.Id) { @Html.Raw("selected") }>@item2.nome</option>
                                }
                            </select>
                        </div>

                        <div class="form-group col-sm-3 filtros">
                            <input id="filtroJogador" name="filtroJogador" type="text" value="" placeholder="Nome Jogador" class="form-control" />
                        </div>

                        <div class="form-group col-sm-4 filtros">
                            <input type="button" value="Filtrar" class="btn btn-primary" onclick="Selecionar()">
                        </div>

                    </div>


                    <div class="form-row">
                        <div class="form-group col-sm-8">
                            <h5 style="color: #3c8dbc">Só é possível selecionar cabeça de chave para jogadores com pagamento da inscrição confirmado.</h5>
                        </div>
                    </div>
                    <div class="box-body table-responsive no-padding">
                        <input type="hidden" value="@Model.Count()" id="qtdeRegistros">
                        <table class="table table-striped table-condensed table-bordered">
                            <tr>
                                <th>
                                    <b>#</b>
                                </th>
                                <th>
                                    Nome
                                </th>
                                <th width="200px">
                                    Cabeça de chave
                                </th>

                            </tr>
                            @foreach (var item in Model)
                            {
                                i++;
                                <tr>
                                    <td>
                                        @i
                                    </td>
                                    <td>
                                        <a href="@Url.Action("../Account/EditaUsuario", new { UserName = item.UserNameParticipante })" title="Editar" target="_blank" style="vertical-align: sub">
                                            @Html.DisplayFor(modelItem => item.NomeParticipante)
                                        </a>
                                        @if (item.InscricaoParticipantePaga)
                                        {
                                            <a style="text-decoration: none; color: white; background-color: #28a745; font-size: 9px; padding: 2px">PAGO</a>
                                        }
                                        else
                                        {
                                            <a style="text-decoration: none; color: white; background-color: #dc3545; font-size: 9px; padding: 2px ">NÃO PAGO</a>
                                        }
                                        @if (item.EhDupla)
                                        {
                                            @Html.Raw("/")
                                            <a href="@Url.Action("../Account/EditaUsuario", new { UserName = item.UserNameParceiroDupla })" title="Editar" target="_blank" style="vertical-align: sub">
                                                @Html.DisplayFor(modelItem => item.NomeParceiroDupla)
                                            </a>
                                            if (item.InscricaoParceiroDuplaPaga)
                                            {
                                                <a style="text-decoration: none; color: white; background-color: #28a745; font-size: 9px; padding: 2px">PAGO</a>
                                            }
                                            else
                                            {
                                                <a style="text-decoration: none; color: white; background-color: #dc3545; font-size: 9px; padding: 2px ">NÃO PAGO</a>
                                            }
                                        }

                                    </td>
                                    <td>
                                        <input type="hidden" id="@Html.Raw("idInscricao" + i)" value="@item.IdInscricao">
                                        <input type="hidden" value="100" id="@Html.Raw("oldCabecaChave" + i)">
                                        @if (item.TodaInscricaoPaga == false)
                                        {
                                            <select name="@Html.Raw("cabecaChave" + i)" id="@Html.Raw("cabecaChave" + i)" class="form-control" disabled>
                                                <option value="100" @if (item.CabecaChave == 100) { @Html.Raw("selected") }>não</option>
                                                @for (int j = 1; j <= ViewBag.CabecasDeChave; j++)
                                                {
                                                    <option value="@j" @if (item.CabecaChave == j) { @Html.Raw("selected") }>@j</option>
                                                }
                                            </select>
                                        }
                                        else
                                        {
                                            <select name="@Html.Raw("cabecaChave" + i)" id="@Html.Raw("cabecaChave" + i)" class="form-control validarCabecaChave" onchange="validarCabecaChave(this)">
                                                <option value="100" @if (item.CabecaChave == 100) { @Html.Raw("selected") }>não</option>
                                                @for (int j = 1; j <= ViewBag.CabecasDeChave; j++)
                                                {
                                                    <option value="@j" @if (item.CabecaChave == j) { @Html.Raw("selected") }>@j</option>
                                                }
                                            </select>
                                        }
                                    </td>

                                </tr>
                            }
                        </table>
                    </div>

                </div>
            </div>

            <br>


        </div>
    </div>

    <div id="modalImportarCabecaChave" class="modal fade" role="dialog">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header" style="padding:5px">
                    <a class="close" data-dismiss="modal">×</a>
                    <h3>Selecione o circuito</h3>
                </div>

                <div class="modal-body">
                    <div class="form-group">
                        <input type="hidden" id="hiddenIdTorneioModal" class="form-control">
                        <input type="hidden" id="hiddenFiltroClasseModal" class="form-control">
                    </div>

                    <select id="filtroImpChave" class="form-control">
                        <option value="0" selected>SELECIONE</option>
                        @foreach (var item2 in ViewBag.CircuitosImpCabecaChave)
                        {
                            <option value="@item2.Value">@item2.Text</option>
                        }
                    </select>
                </div>
                <div class="modal-footer">

                    <div style="display: inline-block; float: right;" class="col-md-6">
                        <button type="button" class="btn btn-default" data-dismiss="modal"><span class="spinner-border spinner-border-sm"></span>Cancelar</button>
                        <input type="button" value="Importar" class="btn btn-primary" id="btnEfetuarImportacaoCabecaChave" />
                    </div>
                </div>

            </div>
        </div>
    </div>


    <style>

        .filtros {
            padding: 5px !important;
        }

        select option:disabled {
            color: #ff0000;
            font-weight: bold;
        }
    </style>

    @section Scripts {
        <script type="text/javascript">

            function abrirModalImportarCabecaChave() {
                var torneioId = document.getElementById('torneioId').value;
                var classeId = document.getElementById('filtroClasse').value;

                $('#hiddenIdTorneioModal').val(torneioId);
                $('#hiddenFiltroClasseModal').val(classeId);
            }

            $("#btnEfetuarImportacaoCabecaChave").click(function (event) {

                var ligaId = document.getElementById("filtroImpChave").value;

                if (ligaId == 0) {
                    toastr.error("Selecione o circuito", "Aviso");
                    return;
                }

                $.ajax({
                    type: "POST",
                    url: "/Torneio/ImportarCabecasChave",
                    cache: false,
                    dataType: "json",
                    data: {
                        torneioId: $("#hiddenIdTorneioModal").val(),
                        ligaId: ligaId
                    },
                    success: function (response) {
                        if (response.retorno == 0) {
                            toastr.error(response.erro, "Aviso");
                        }
                        else {
                            toastr.success("Importação de cabeças de chave efetuada com sucesso.", "Aviso");
                            location.reload(true);
                        }
                        $("#modalImportarCabecaChave").modal('hide');
                    }
                });

            });

            function validarCabecaChave(element) {
                var qtdeRegistros = parseInt($("#qtdeRegistros").val());

                var nomeComboAtualSelecionado = element.getAttribute("name");
                var valorAtualSelecionado = element.value;

                var nomeItemAnteriorSelecionado = ObterNomeItemAnteriorSelecionado(nomeComboAtualSelecionado);
                var valorAnteriorSelecionado = parseInt($("#" + nomeItemAnteriorSelecionado).val());

                for (var i = 1; i <= qtdeRegistros; i++) {
                    var nomeComboValidacao = "cabecaChave" + i;

                    if (nomeComboAtualSelecionado != nomeComboValidacao) {

                        if (valorAtualSelecionado != 100) {
                            //Desabilita em outros combos da lista a opção selecionada
                            $("#" + nomeComboValidacao + " option[value='" + valorAtualSelecionado + "']").prop("disabled", true);
                        }

                        if (valorAnteriorSelecionado != 100) {
                            //Habilita em outros combos da lista a opçao anterior que estava bloqueada
                            $("#" + nomeComboValidacao + " option[value='" + valorAnteriorSelecionado + "']").prop("disabled", false);
                        }
                    }
                }
                $("#" + nomeItemAnteriorSelecionado).val(element.value);

                EfetivarAlteracaoCabecaChave(ObterIdInscricao(nomeComboAtualSelecionado), valorAtualSelecionado);

            }

            function EfetivarAlteracaoCabecaChave(id, cabecaChave) {
                $.ajax({
                    type: "POST",
                    url: "/Torneio/EditCabecaChave",
                    dataType: "json",
                    data: "{'Id':'" + id + "', 'cabecaChave':'" + cabecaChave + "'}",
                    contentType: "application/json; charset=utf-8",
                    success: function (response) {
                        if (typeof response == "object") {
                            toastr.options = {
                                "positionClass": "toast-top-center"
                            }
                            if (response.retorno === 0) {
                                toastr.error(response.erro, "Erro");
                            } else {
                                toastr.success("Atualização realizada com sucesso.", "Aviso");
                            }
                        }
                    },
                    error: function (jqXHR, textStatus, errorThrown) {
                        location.reload(true);
                    }
                });
            }

            function ObterNomeItemAnteriorSelecionado(nomeComboAtualSelecionado) {
                var qtdeRegistros = parseInt($("#qtdeRegistros").val());
                var nome = "";
                for (var i = 1; i <= qtdeRegistros; i++) {
                    var nomeComboValidacao = "cabecaChave" + i;
                    if (nomeComboAtualSelecionado == nomeComboValidacao) {
                        nome = "oldCabecaChave" + i;
                    }
                }
                return nome;
            }

            function ObterIdInscricao(nomeComboAtualSelecionado) {
                var qtdeRegistros = parseInt($("#qtdeRegistros").val());
                var nome = "";
                for (var i = 1; i <= qtdeRegistros; i++) {
                    var nomeComboValidacao = "cabecaChave" + i;
                    if (nomeComboAtualSelecionado == nomeComboValidacao) {
                        nome = "idInscricao" + i;
                    }
                }
                return parseInt($("#" + nome).val());
            }

            function CarregarValoresIniciaisSelecionados() {
                var qtdeRegistros = parseInt($("#qtdeRegistros").val());
                for (var i = 1; i <= qtdeRegistros; i++) {
                    var nomeComboValidacao = "cabecaChave" + i;
                    var valorComboValidacao = document.getElementById(nomeComboValidacao).value;
                    $("#oldCabecaChave" + i).val(valorComboValidacao);

                    for (var j = 1; j <= qtdeRegistros; j++) {
                        var nomeComboDesabilitaOpt = "cabecaChave" + j;
                        if (nomeComboValidacao != nomeComboDesabilitaOpt && valorComboValidacao != 100) {
                            $("#" + nomeComboDesabilitaOpt + " option[value='" + valorComboValidacao + "']").prop("disabled", true);
                        }
                    }
                }
            }

            function Selecionar() {
                var torneioId = document.getElementById('torneioId').value;
                var classeId = document.getElementById('filtroClasse').value;
                var filtroJogador = document.getElementById('filtroJogador').value;
                window.location = "EditCabecaChave?torneioId=" + torneioId + "&filtroClasse=" + classeId + "&filtroJogador=" + filtroJogador;
            }

            CarregarValoresIniciaisSelecionados();

        </script>
    }
