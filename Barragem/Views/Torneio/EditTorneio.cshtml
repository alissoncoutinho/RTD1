@model Barragem.Models.Torneio
@{
    Barragem.Models.CobrancaTorneio cobrancaTorneio = ViewBag.CobrancaTorneio;
    var link = ViewBag.LinkParaCopia;
}

@Html.Partial("_PartialTabs", "")

<div class="tab-content">
    <div class="tab-pane fade in active" id="tabCadastro">
        @using (Html.BeginForm("EditTorneio", "Torneio", FormMethod.Post, new { @class = "form-horizontal" }))
        {
            @Html.AntiForgeryToken()
            @Html.ValidationSummary(true)
            <br>

            @Html.HiddenFor(model => model.dataFimInscricoes)
            @Html.HiddenFor(model => model.liberaTabelaInscricao)
            @Html.HiddenFor(model => model.liberarTabela)
            @Html.HiddenFor(model => model.divulgacao)
            @Html.HiddenFor(model => model.StatusInscricao)

            <div class="box box-primary">
                <div class="box-header with-border">
                    <h4 class="box-title">Informações Básicas</h4>
                </div>
                <div class="box-body">
                    <div class="form-group">
                        @Html.LabelFor(model => model.nome, new { @class = "col-sm-2 control-label" })
                        <div class="col-xs-12 col-sm-8 input-group">
                            @Html.TextBoxFor(model => model.nome, new { @class = "form-control" })
                            @Html.HiddenFor(model => model.TipoTorneio)
                            @Html.HiddenFor(model => model.inscricaoSoPeloSite)
                        </div>
                        @Html.ValidationMessageFor(model => model.nome)
                    </div>
                    <div class="form-group">
                        @Html.LabelFor(model => model.dataInicio, new { @class = "col-sm-2 control-label" })
                        <div class="col-sm-4 input-group date" id="dataInicio" data-date-format="dd/mm/yyyy">
                            <input type="text" name="dataInicio" id="dataInicio" value="@Model.dataInicio.ToShortDateString()" class="form-control" readonly="readonly" />
                            <span class="input-group-addon">
                                <span class="glyphicon glyphicon-calendar">
                                </span>
                            </span>
                        </div>
                        @Html.ValidationMessageFor(model => model.dataInicio)
                    </div>
                    <div class="form-group">
                        @Html.LabelFor(model => model.dataFim, new { @class = "col-sm-2 control-label" })
                        <div class="col-sm-4 input-group date" id="dataFim" data-date-format="dd/mm/yyyy">
                            <input type="text" name="dataFim" id="dataFim" value="@Model.dataFim.ToShortDateString()" class="form-control" readonly="readonly" />
                            <span class="input-group-addon">
                                <span class="glyphicon glyphicon-calendar">
                                </span>
                            </span>
                        </div>
                        @Html.ValidationMessageFor(model => model.dataFim)
                    </div>

                    <div class="form-group">
                        @Html.LabelFor(model => model.cidade, new { @class = "col-sm-2 control-label" })
                        <div class="col-sm-8 input-group">
                            @Html.TextBoxFor(model => model.cidade, new { @class = "form-control" })
                        </div>
                        @Html.ValidationMessageFor(model => model.cidade)
                    </div>
                    <div class="form-group">
                        @Html.LabelFor(model => model.local, new { @class = "col-sm-2 control-label" })
                        <div class="col-sm-8 input-group">
                            @Html.TextBoxFor(model => model.local, new { @class = "form-control" })
                        </div>
                        @Html.ValidationMessageFor(model => model.local)
                    </div>
                    <div class="form-group">
                        @Html.LabelFor(model => model.premiacao, new { @class = "col-sm-2 control-label" })
                        <div class="col-sm-8 input-group">
                            @Html.TextBoxFor(model => model.premiacao, new { @class = "form-control", @placeholder = "" })
                        </div>
                        @Html.ValidationMessageFor(model => model.premiacao)
                    </div>
                    <div class="form-group">
                        @Html.LabelFor(model => model.contato, new { @class = "col-sm-2 control-label" })
                        <div class="col-sm-8 col-xs-12 input-group">
                            @Html.TextAreaFor(model => model.contato)
                        </div>
                    </div>


                    @if (Roles.IsUserInRole("admin"))
                    {
                        <div class="form-group">
                            @Html.LabelFor(model => model.barragem, new { @class = "col-sm-2 control-label" })
                            <div class="col-sm-6 input-group">
                                @Html.DropDownList("barragemId", null, new { @class = "form-control" })
                            </div>
                            @Html.ValidationMessageFor(model => model.barragemId)
                        </div>
                    }
                    else
                    {
                        <input type="hidden" name="barragemId" value="@ViewBag.barraId" />
                    }


                </div>
            </div>
            <div class="box box-primary">
                <div class="box-header with-border">
                    <h4 class="box-title">Inscrição</h4>
                </div>
                <div class="box-body">
                    <div class="form-group">
                        @Html.Label("Em quantas categorias o jogador poderá se inscrever?", new { @class = "col-sm-2 control-label" })
                        <div class="col-sm-6 input-group">
                            <select name="qtddCategoriasPorJogador" id="qtddCategoriasPorJogador" class="form-control" onchange="habilibarValoresInscricao()">
                                <option value="1" @if (Model.qtddCategoriasPorJogador == 1) { @Html.Raw(" selected ") }>1 categoria</option>
                                <option value="2" @if (Model.qtddCategoriasPorJogador == 2) { @Html.Raw(" selected ") }>2 categoria</option>
                                <option value="3" @if (Model.qtddCategoriasPorJogador == 3) { @Html.Raw(" selected ") }>3 categoria</option>
                                <option value="4" @if (Model.qtddCategoriasPorJogador == 4) { @Html.Raw(" selected ") }>4 categoria</option>
                            </select>
                        </div>
                    </div>
                    <div class="form-group">
                        @Html.Label("Qual valor o jogador irá pagar se inscrever em:", new { @class = "col-sm-4 control-label" })
                    </div>
                    <div id="valorDiv" class="form-group">
                        @Html.Label("1 categoria", new { @class = "col-sm-2 control-label" })
                        <div class="col-sm-4 input-group">
                            @Html.TextBoxFor(model => model.valor, new { @class = "form-control", @placeholder = "Informe 0 para torneio gratuito" })
                        </div>
                        @Html.ValidationMessageFor(model => model.valor)
                    </div>
                    <div id="valorDiv2" class="form-group">
                        @Html.Label("2 categorias", new { @class = "col-sm-2 control-label" })
                        <div class="col-sm-4 input-group">
                            @Html.TextBoxFor(model => model.valor2, new { @class = "form-control" })
                        </div>
                        @Html.ValidationMessageFor(model => model.valor2)
                    </div>
                    <div id="valorDiv3" class="form-group">
                        @Html.Label("3 categorias", new { @class = "col-sm-2 control-label" })
                        <div class="col-sm-4 input-group">
                            @Html.TextBoxFor(model => model.valor3, new { @class = "form-control" })
                        </div>
                        @Html.ValidationMessageFor(model => model.valor3)
                    </div>
                    <div id="valorDiv4" class="form-group">
                        @Html.Label("4 categorias", new { @class = "col-sm-2 control-label" })
                        <div class="col-sm-4 input-group">
                            @Html.TextBoxFor(model => model.valor4, new { @class = "form-control" })
                        </div>
                        @Html.ValidationMessageFor(model => model.valor4)
                    </div>
                    @Html.Label("Qual valor do desconto? (opcional)", new { @class = "control-label" })
                    <div class="form-group">
                        <div class="col-md-6 col-xs-12">
                            <div class="row">
                                <div class="col-xs-1 col-md-1">
                                    @if (Model.isDesconto != null && (bool)Model.isDesconto)
                                    {
                                        <input type="checkbox" checked value="true" name="isDesconto" id="isDesconto" onclick="CadastrarValorDescontoSocio()" />
                                    }
                                    else
                                    {
                                        <input type="checkbox" value="true" name="isDesconto" id="isDesconto" onclick="CadastrarValorDescontoSocio()" />
                                    }

                                </div>
                                <div class="col-xs-6 col-md-4">
                                    <select name="descontoPara" class="form-control">
                                        <option @if (Model.descontoPara != null && Model.descontoPara.Equals("sócio do clube")) { @Html.Raw("selected") } value="sócio do clube">sócio</option>
                                        <option @if (Model.descontoPara != null && Model.descontoPara.Equals("barragista")) { @Html.Raw("selected") } value="barragista">barragista</option>
                                    </select>
                                </div>
                                <div class="col-xs-4 col-md-4">
                                    <div class="form-group">
                                        @Html.Label("R$", new { @class = "col-xs-5 col-md-3 control-label" })
                                        <div class="col-xs-6 col-md-6 input-group">
                                            @Html.TextBoxFor(model => model.valorSocio, new { @class = "form-control" })
                                        </div>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                    <div class="form-group">
                        <div class="col-md-6 col-xs-12">
                            <div class="row">
                                <div class="col-xs-1 col-md-1">
                                    @if (Model.valorDescontoFederado != null && Model.valorDescontoFederado > 0)
                                    {
                                        <input type="checkbox" checked value="true" name="isDescontoFederado" id="isDescontoFederado" />
                                    }
                                    else
                                    {
                                        <input type="checkbox" value="true" name="isDescontoFederado" id="isDescontoFederado" />
                                    }

                                </div>
                                <div class="col-xs-6 col-md-4">
                                    @Html.Label("Federado", new { @class = "control-label" })
                                </div>
                                <div class="col-xs-4 col-md-4">
                                    <div class="form-group">
                                        @Html.Label("R$", new { @class = "col-xs-5 col-md-3 control-label" })
                                        <div class="col-xs-6 col-md-6 input-group">
                                            @Html.TextBoxFor(model => model.valorDescontoFederado, new { @class = "form-control" })
                                        </div>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>

            <div class="box box-primary">
                <div class="box-header with-border">
                    <h4 class="box-title">Formas de pagamento da inscrição</h4>
                </div>
                <div class="box-body">
                    <input type="hidden" id="tokenPagSeguro" value="@ViewBag.tokenPagSeguro">
                    <br><input type="checkbox" name="cartao" id="cartao" value="true" onclick="isCartaoCredito()" @if (ViewBag.PagSeguroAtivo) { @Html.Raw("checked") }> <b>Deseja aceitar inscrição via PIX com detecção automática de pagamento?</b><br>

                    <div id="isCartao">
                        <div class="editor-label">
                            <small style="color:red">Você ainda não integrou o Pagseguro - <a href="/Barragens/EditPagSeguro" target="_blank">Clique aqui</a> para realizar sua integração.</small>
                        </div>
                    </div>
                    <script>
                        document.getElementById('isCartao').style.opacity = "0 !important";
                        document.getElementById('isCartao').style.display = "none";
                    </script>

                    <br>

                    <input type="checkbox" name="transferencia" id="transferencia" value="true" onclick="isTransferenciaBancaria()" @if (!string.IsNullOrEmpty(Model.dadosBancarios)) { @Html.Raw("checked") }><b> Usar transferência como forma de pagamento</b><br>
                    <div id="isTransferencia" style="margin-bottom:-40px">
                        @Html.Partial("_PartialDadosBancariosTorneio", Model)
                    </div>
                </div>
            </div>

            <div class="box box-primary">
                <div class="box-header with-border">
                    <h4 class="box-title">Configurações</h4>
                </div>
                <div class="box-body">
                    <div class="form-group">
                        @Html.Label("O próprio jogador poderá lançar o resultado do jogo?", new { @class = "col-sm-3 control-label" })
                        <div class="col-sm-2 input-group">
                            <select name="jogadorNaoLancaResult" id="jogadorNaoLancaResult" class="form-control">
                                <option value=true @if (Model.jogadorNaoLancaResult) { @Html.Raw(" selected ") }>Não</option>
                                <option value=false @if (!Model.jogadorNaoLancaResult) { @Html.Raw(" selected ") }>Sim</option>
                            </select>
                        </div>
                    </div>
                    <div class="form-group">
                        @Html.Label("Seu torneio será gratuito para associado?", new { @class = "col-sm-3 control-label" })
                        <div class="col-sm-2 input-group">
                            <select name="isGratuitoSocio" id="isGratuitoSocio" class="form-control">
                                <option value=false @if (!Model.isGratuitoSocio) { @Html.Raw(" selected ") }>Não</option>
                                <option value=true @if (Model.isGratuitoSocio) { @Html.Raw(" selected ") }>Sim</option>
                            </select>
                        </div>
                    </div>

                    <div class="form-group" hidden>
                        @Html.Label("Seu torneio terá repescagem?", new { @class = "col-sm-3 control-label" })
                        <div class="col-sm-2 input-group">
                            <select name="temRepescagem" id="temRepescagem" class="form-control">
                                <option value=false @if (!Model.temRepescagem) { @Html.Raw(" selected ") }>Não</option>
                                <option value=true @if (Model.temRepescagem) { @Html.Raw(" selected ") }>Sim</option>
                            </select>
                        </div>
                    </div>

                    <div class="form-group">
                        @Html.Label("Seu torneio terá limite de quantidade de inscritos?", new { @class = "col-sm-3 control-label" })
                        <div class="col-sm-2 input-group">
                            <select name="temLimiteDeInscricao" id="temLimiteDeInscricao" class="form-control">
                                <option value=false @if (Model.temLimiteDeInscricao == null || (bool)!Model.temLimiteDeInscricao) { @Html.Raw(" selected ") }>Não</option>
                                <option value=true @if (Model.temLimiteDeInscricao != null && (bool)Model.temLimiteDeInscricao) { @Html.Raw(" selected ") }>Sim</option>
                            </select>
                        </div>
                    </div>
                    <div class="form-group">
                        @Html.Label("Pergunta personalizada que aparecerá na ficha de inscrição", new { @class = "col-sm-3 control-label" })
                        <div class="col-sm-8 col-xs-12 input-group">
                            @Html.TextBoxFor(model => model.observacao, new { @class = "form-control" })
                        </div>
                        @Html.ValidationMessageFor(model => model.observacao)
                    </div>


                </div>
            </div>
            <div class="box box-primary">
                <div class="box-header with-border">
                    <h4 class="box-title">Liberar</h4>
                </div>
                <div class="box-body">
                    @if (Roles.IsUserInRole("admin"))
                    {
                        <div class="col-sm-3">
                            <div class="checkbox">
                                <label>
                                    @Html.CheckBoxFor(model => model.torneioFoiPago) @Html.Raw(" Torneio Foi Pago: " + string.Format(new System.Globalization.CultureInfo("pt-BR"), "{0:C}", cobrancaTorneio.valorASerPago) + " ?")
                                </label>
                            </div>
                        </div>
                    }
                    else
                    {
                        <input type="hidden" name="torneioFoiPago" value="@if (Model.torneioFoiPago) { @Html.Raw("true")  } else { @Html.Raw("false") }" />
                    }
                </div>
            </div>
            <div class="box box-primary">
                <div class="box-header with-border">
                    <h4 class="box-title">Pontuação para circuitos</h4>
                </div>
                <div class="box-body">
                    <div class="panel panel-primary">
                        <div class="panel-heading">Este torneio conta pontos para quais circuito(s) abaixo:</div>
                        <div class="panel-body">
                            @{ List<Barragem.Models.Liga> ligasTorneio = ViewBag.LigasDoTorneio;
                                foreach (var lg in ViewBag.LigasDisponiveis)
                                {
                                    <input type="checkbox" class="circuitos" @if (ligasTorneio.Where(l => l.Id == lg.Liga.Id).Count() > 0) { @Html.Raw("checked") } name="liga" value="@lg.Liga.Id" onchange="inputCheckboxSelectPontos(this)">
                                    if (ViewBag.isModeloTodosContraTodos)
                                    {
                                        @Html.Raw(lg.Liga.Nome) if (Roles.IsUserInRole("admin"))
                                        { @Html.Raw(" - Todos contra todos")}
                                }
                                else
                                {
                                    @Html.Raw(lg.Liga.Nome + " - Pt. " + Model.TipoTorneio) if (Roles.IsUserInRole("admin"))
                                    {
                                        if (lg.Liga.isModeloTodosContraTodos)
                                        {@Html.Raw(" - Todos contra todos")}
                                    else
                                    {@Html.Raw(" - Regras da Federação") }
                            }
                        }
                        <br>
                    }

                    <ul id="circuitosPermiteEdicaoPontos" style="display:none">
                        @foreach (var lg in ViewBag.LigasDisponiveis)
                        {
                            if (ViewBag.barraId == lg.BarragemId && !ViewBag.isModeloTodosContraTodos)
                            {
                                <li>@lg.Liga.Id</li>

                            }
                        }
                    </ul>
                            }

                            <div>
                                <input type="hidden" value="@Model.TipoTorneio" id="pontuacaoOriginalTorneio">
                                <span class="pontuacao-circuito">
                                    <br />
                                    <span id="textoPontuacaoLiga"><b>Selecione a pontuação: </b></span>
                                    <select name="pontuacaoCircuito" id="pontuacaoCircuito" onchange="SelecionarCircuito(this)">
                                        <option @if (Model.TipoTorneio == null) { @Html.Raw("selected") } disabled="disabled" value="-">-</option>
                                        <option @if (Model.TipoTorneio == "100") { @Html.Raw("selected") } value="100">100</option>
                                        <option @if (Model.TipoTorneio == "250") { @Html.Raw("selected") } value="250">250</option>
                                        <option @if (Model.TipoTorneio == "500") { @Html.Raw("selected") } value="500">500</option>
                                        <option @if (Model.TipoTorneio == "1000") { @Html.Raw("selected") } value="1000">1000</option>
                                    </select>
                                </span>
                            </div>
                            <div id="divTabelasPontuacao" class="tabelasPontuacao">
                                <div class="box-header with-border">
                                    <h4 class="box-title">Pontuação por posição no torneio</h4>
                                </div>
                                <div class="table-responsive">
                                    <table id="tabelaPontuacaoPosicaoTorneio" class="table table-sm table-striped table-condensed table-bordered">
                                        <tr>
                                            <th class="cabecalhoTabelaPontos" scope="col">Campeão</th>
                                            <th class="cabecalhoTabelaPontos" scope="col">Vice</th>
                                            <th class="cabecalhoTabelaPontos" scope="col">Semi</th>
                                            <th class="cabecalhoTabelaPontos" scope="col">Quartas</th>
                                        </tr>
                                        <tr>
                                            <td scope="row"></td>
                                            <td scope="row"></td>
                                            <td scope="row"></td>
                                            <td scope="row"></td>
                                        </tr>
                                        <tr>
                                            <th class="cabecalhoTabelaPontos" scope="col">Oitavas</th>
                                            <th class="cabecalhoTabelaPontos" scope="col">16 de Final</th>
                                            <th class="cabecalhoTabelaPontos" scope="col">32 de Final</th>
                                            <th class="cabecalhoTabelaPontos" scope="col">Fase Grupo</th>
                                        </tr>
                                        <tr>
                                            <td scope="row"></td>
                                            <td scope="row"></td>
                                            <td scope="row"></td>
                                            <td scope="row"></td>
                                        </tr>
                                    </table>

                                    <div>
                                        <div class="box-header with-border">
                                            <h4 class="box-title">Pontuação em chave de grupos com até 5 jogadores</h4>
                                        </div>
                                        <div class="table-responsive">
                                            <table id="tabelaPontuacaoChaveGrupo" class="table table-sm table-condensed table-bordered">
                                                <tr>
                                                    <th class="cabecalhoTabelaPontos" scope="row">1º</th>
                                                    <td scope="row"></td>
                                                    <th class="cabecalhoTabelaPontos" scope="row">4º</th>
                                                    <td scope="row"></td>
                                                </tr>
                                                <tr>
                                                    <th class="cabecalhoTabelaPontos" scope="row">2º</th>
                                                    <td scope="row"></td>
                                                    <th class="cabecalhoTabelaPontos" scope="row">5º</th>
                                                    <td scope="row"></td>
                                                </tr>
                                                <tr>
                                                    <th class="cabecalhoTabelaPontos" scope="row">3º</th>
                                                    <td scope="row"></td>
                                                    <th class="cabecalhoTabelaPontos" scope="row"></th>
                                                    <td scope="row"></td>
                                                </tr>
                                            </table>
                                        </div>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
            <div class="box box-primary">
                <div class="box-header with-border">
                    <h4 class="box-title">Regulamento</h4>
                </div>
                <div class="box-body">
                    <div class="editor-field">
                        @Html.TextAreaFor(model => model.regulamento)
                        @Html.ValidationMessageFor(model => model.regulamento)
                    </div>
                </div>
            </div>
            <!-- /.box-body -->
            <div class="box-footer">
                <a href="@Url.Action("Index")" title="Voltar" class="btn btn-default">Voltar</a>
                <button type="submit" class="btn btn-info pull-right">Gravar</button>
            </div>

        }

    </div>

    <div class="tab-pane fade" id="tabClasses">
        <br>
        <button type="button" onclick="saveJogadoresAlterados()" class="btn btn-info">Gravar</button>

        <div class="box-body">
            @{
                List<Barragem.Models.InscricaoTorneio> inscricaoTorneio = ViewBag.JogadoresClasses;
            }
            @for (int i = 1; i <= Model.qtddClasses; i++)
            {
                var ulId = "sortable" + i;
                var nivel = i;
                var qtddAtleta = "qtddAtleta" + i;
                <div class="col-md-2">
                    <div class="box box-primary">
                        <div class="with-border">
                            <h4 class="sortable-title">Classe @nivel - Qtdd:<span id="@qtddAtleta">@inscricaoTorneio.Where(r => r.classe == nivel).Count()</span></h4>
                        </div>
                        <ul id="@ulId" class="connectedSortable">
                            @foreach (var item in inscricaoTorneio)
                            {
                                if (item.classe == nivel)
                                {
                                    var liClass = "ui-state-classe" + nivel;
                                    <li class="@liClass" title="@item.participante.nome">
                                        <input type="hidden" value="@item.Id" name="Id">
                                        <input type="hidden" value="@item.classe" name="classeId">
                                        @{var nome = item.participante.nome;
                                            if (nome.Length > 14)
                                            {
                                                nome = item.participante.nome.Substring(0, 15) + "...";
                                            }
                                        }
                                        @Html.Raw(nome)
                                    </li>
                                }
                                else if (item.classe > nivel)
                                {
                                    break;
                                }
                            }
                        </ul>
                    </div>
                </div>
            }
        </div>
        <div class="box-footer">
            <button type="button" onclick="saveJogadoresAlterados()" class="btn btn-info">Gravar</button>
        </div>
    </div>
    <div class="tab-pane fade" id="tabInscritos"></div>
    <div class="tab-pane fade" id="tabJogos"></div>
    <div class="tab-pane fade" id="tabEditClasses"></div>
</div>
<link rel="stylesheet" href="//code.jquery.com/ui/1.12.1/themes/base/jquery-ui.css">
<style>
    .nav-tabs {
        flex-wrap: wrap;
    }

    select {
        appearance: auto;
    }

    .box {
        box-shadow: 0 0px 0px rgba(0,0,0,0.1);
    }

    .form-control:not(select) {
        -webkit-appearance: none;
        -moz-appearance: none;
        appearance: none;
    }

    .ui-autocomplete-loading {
        background: white url("/Content/image/ui-anim_basic_16x16.gif") right center no-repeat;
    }

    .tabelasPontuacao {
        padding-top: 10px;
    }

    .cabecalhoTabelaPontos {
        background-color: #bad6ed !important;
    }
</style>
@section Scripts {
    @Scripts.Render("~/bundles/editor")
    <script type="text/javascript">
        tinyMCE.baseURL = '@Url.Content("~/Scripts/tinymce/")'
        tinyMCE.init({
            selector: 'textarea#dadosBancarios',
            menubar: false,
            language: 'pt_BR',
            theme: "modern",
            theme_advanced_font_sizes: "10px,12px,13px,14px,16px,18px,20px",
            font_size_style_values: "12px,13px,14px,16px,18px,20px",
            width: 700,
            height: 150,
            toolbar1: "bold italic | underline | alignleft aligncenter alignright alignjustify | forecolor backcolor | fontselect |  fontsizeselect"

        });

        tinyMCE.init({
            selector: 'textarea#regulamento',
            language: 'pt_BR',
            theme: "modern",
            theme_advanced_font_sizes: "10px,12px,13px,14px,16px,18px,20px",
            font_size_style_values: "12px,13px,14px,16px,18px,20px",
            relative_urls: false,
            remove_script_host: false,
            width: 700,
            height: 150,
            plugins: [
                "code image"
            ],
            toolbar1: "bold italic | underline | alignleft aligncenter alignright alignjustify | forecolor backcolor | fontselect |  fontsizeselect"

        });

        tinyMCE.init({
            selector: 'textarea#contato',
            menubar: false,
            language: 'pt_BR',
            theme: "modern",
            theme_advanced_font_sizes: "10px,12px,13px,14px,16px,18px,20px",
            font_size_style_values: "12px,13px,14px,16px,18px,20px",
            width: 500,
            height: 150,
            toolbar1: "bold italic | underline | alignleft aligncenter alignright alignjustify | forecolor backcolor | fontselect |  fontsizeselect"

        });

        function isTransferenciaBancaria() {
            if (document.getElementById('transferencia').checked) {
                document.getElementById('isTransferencia').style.opacity = "1";
                document.getElementById('isTransferencia').style.display = "block";
            } else {
                document.getElementById('isTransferencia').style.opacity = "0 !important";
                document.getElementById('isTransferencia').style.display = "none";
            }
        }

        function carregarTabelasPontuacao(pontuacaoLiga) {

            var pontuacao = obterPontuacao(pontuacaoLiga);

            $('#tabelaPontuacaoPosicaoTorneio td').eq(0).html(pontuacao[1]);
            $('#tabelaPontuacaoPosicaoTorneio td').eq(1).html(pontuacao[2]);
            $('#tabelaPontuacaoPosicaoTorneio td').eq(2).html(pontuacao[3]);
            $('#tabelaPontuacaoPosicaoTorneio td').eq(3).html(pontuacao[4]);
            $('#tabelaPontuacaoPosicaoTorneio td').eq(4).html(pontuacao[5]);
            $('#tabelaPontuacaoPosicaoTorneio td').eq(5).html(pontuacao[6]);
            $('#tabelaPontuacaoPosicaoTorneio td').eq(6).html(pontuacao[7]);
            $('#tabelaPontuacaoPosicaoTorneio td').eq(7).html(pontuacao[7]);

            $('#tabelaPontuacaoChaveGrupo td').eq(0).html(pontuacao[1]);
            $('#tabelaPontuacaoChaveGrupo td').eq(2).html(pontuacao[2]);
            $('#tabelaPontuacaoChaveGrupo td').eq(4).html(pontuacao[3]);
            $('#tabelaPontuacaoChaveGrupo td').eq(1).html(pontuacao[4]);
            $('#tabelaPontuacaoChaveGrupo td').eq(3).html(pontuacao[5]);

        }

        function obterPontuacao(pontuacaoLiga) {
            var pontuacoes = [
                [100, 100, 70, 50, 30, 15, 10, 5],
                [250, 250, 175, 125, 75, 37, 25, 12],
                [500, 500, 350, 250, 150, 75, 50, 25],
                [1000, 1000, 700, 500, 300, 150, 100, 50],
                [2000, 2000, 1400, 1000, 600, 300, 200, 100],
            ];

            for (var i = 0; i < pontuacoes.length; i++) {
                if (pontuacaoLiga == pontuacoes[i][0]) {
                    return pontuacoes[i];
                }
            }
            return null;
        }

        function mostrarTabelaPontuacoes(mostrarTabela) {
            if (mostrarTabela) {
                $("#divTabelasPontuacao").css("display", "block");
            }
            else {
                $("#divTabelasPontuacao").css("display", "none");
            }
        }

        function isCartaoCredito() {
            if (document.getElementById("tokenPagSeguro").value == "") {
                if (document.getElementById('cartao').checked) {
                    document.getElementById('isCartao').style.opacity = "1";
                    document.getElementById('isCartao').style.display = "block";
                } else {
                    document.getElementById('isCartao').style.opacity = "0 !important";
                    document.getElementById('isCartao').style.display = "none";
                }
            }
            else {
                document.getElementById('isCartao').style.opacity = "0 !important";
                document.getElementById('isCartao').style.display = "none";
            }
        }

        $(function () {
            $("#dataInicio").datepicker({
                language: 'pt-BR',
                pickTime: false,
                locale: 'pt-br',
                dateFormat: 'dd/mm/yy'
            });
            $("#dataFim").datepicker({
                language: 'pt-BR',
                pickTime: false,
                locale: 'pt-br',
                dateFormat: 'dd/mm/yy'
            });

            $("#sortable1, #sortable2, #sortable3, #sortable4").sortable({
                connectWith: ".connectedSortable",
                stop: function (e, ui) {
                    for (i = 1; i < 6; i++) {
                        var cont = 0;
                        var classe = "#sortable" + i + " li";
                        $.each($(classe), function (key, val) {
                            cont++
                        });
                        var idDiv = "#qtddAtleta" + i
                        $(idDiv).html(cont);
                    }
                }
            }).disableSelection();

            $("#sortable5").sortable({
                connectWith: ".connectedSortable",
                stop: function (e, ui) {
                    for (i = 1; i < 6; i++) {
                        var cont = 0;
                        var classe = "#sortable" + i + " li";
                        $.each($(classe), function (key, val) {
                            cont++
                        });
                        var idDiv = "#qtddAtleta" + i
                        $(idDiv).html(cont);
                    }
                }
            }).disableSelection();
            $("#cidade").autocomplete({
                source: function (request, response) {
                    $.ajax({
                        url: "/Cidade/getCidade",
                        dataType: "jsonp",
                        data: {
                            q: request.term
                        },
                        success: function (data) {
                            response(data);
                        }
                    });
                },
                minLength: 3
            });
            $('#cidade').attr('autocomplete', 'off');
        });

        function getJogadoresAlterados() {
            var newData = new Array();
            for (i = 1; i < 6; i++) {
                var classe = "#sortable" + i + " li";
                $.each($(classe), function (key, val) {
                    var id = $(this).find("input[name=Id]").val();
                    var classeId = $(this).find("input[name=classeId]").val();
                    var fileldValues = {};
                    if (classeId != i) {
                        fileldValues['Id'] = id;
                        fileldValues['classe'] = i;
                        newData.push(fileldValues);
                    }
                });
            }
            return JSON.stringify({ 'inscricaoTorneio': newData });
        }

        function atualizarListaClasses() {
            var newData = new Array();
            for (i = 1; i < 6; i++) {
                var classe = "#sortable" + i + " li";
                $.each($(classe), function (key, val) {
                    var classeId = $(this).find("input[name=classeId]").val();
                    if (classeId != i) {
                        var toggle = "ui-state-classe" + classeId + " ui-state-classe" + i
                        $(this).toggleClass(toggle);
                        $(this).find("input[name=classeId]").val(i);
                    }
                });
            }
            return JSON.stringify({ 'inscricaoTorneio': newData });
        }

        function saveJogadoresAlterados() {
            var inscricaoTorneio = getJogadoresAlterados();
            $.ajax({
                type: "POST",
                url: "/Torneio/AlterarClassesTorneio",
                dataType: "json",
                data: inscricaoTorneio,
                contentType: "application/json; charset=utf-8",
                success: function (response) {
                    if (typeof response == "object") {
                        if (response.retorno === 0) {
                            toastr.error(response.erro, "Erro");
                        } else {
                            toastr.success("Atualização realizada com sucesso.", "Aviso");
                            atualizarListaClasses();
                        }
                    }
                },
                error: function (jqXHR, textStatus, errorThrown) {
                    location.reload(true);
                }
            });
        }

        function CadastrarValorDescontoSocio() {
            if (document.getElementById('isDesconto').checked) {
                //document.getElementById('descontoSocio').style.opacity = "1";
                //document.getElementById('descontoSocio').style.display = "block";
            } else {
                document.getElementById('valorSocio').value = "0";
                document.getElementById('valorMaisClassesSocio').value = "0";
                //document.getElementById('descontoSocio').style.opacity = "0 !important";
                //document.getElementById('descontoSocio').style.display = "none";
            }
        }

        function habilibarValoresInscricao() {
            if (document.getElementById('qtddCategoriasPorJogador').value == 1) {
                document.getElementById('valor2').value = "0";
                document.getElementById('valorDiv2').style.opacity = "0 !important";
                document.getElementById('valorDiv2').style.display = "none";
                document.getElementById('valor3').value = "0";
                document.getElementById('valorDiv3').style.opacity = "0 !important";
                document.getElementById('valorDiv3').style.display = "none";
                document.getElementById('valor4').value = "0";
                document.getElementById('valorDiv4').style.opacity = "0 !important";
                document.getElementById('valorDiv4').style.display = "none";
            } else if (document.getElementById('qtddCategoriasPorJogador').value == 2) {
                document.getElementById('valorDiv2').style.opacity = "1";
                document.getElementById('valorDiv2').style.display = "block";
                document.getElementById('valor3').value = "0";
                document.getElementById('valorDiv3').style.opacity = "0 !important";
                document.getElementById('valorDiv3').style.display = "none";
                document.getElementById('valor4').value = "0";
                document.getElementById('valorDiv4').style.opacity = "0 !important";
                document.getElementById('valorDiv4').style.display = "none";
            } else if (document.getElementById('qtddCategoriasPorJogador').value == 3) {
                document.getElementById('valorDiv2').style.opacity = "1";
                document.getElementById('valorDiv2').style.display = "block";
                document.getElementById('valorDiv3').style.opacity = "1";
                document.getElementById('valorDiv3').style.display = "block";
                document.getElementById('valor4').value = "0";
                document.getElementById('valorDiv4').style.opacity = "0 !important";
                document.getElementById('valorDiv4').style.display = "none";
            } else if (document.getElementById('qtddCategoriasPorJogador').value == 4) {
                document.getElementById('valorDiv2').style.opacity = "1";
                document.getElementById('valorDiv2').style.display = "block";
                document.getElementById('valorDiv3').style.opacity = "1";
                document.getElementById('valorDiv3').style.display = "block";
                document.getElementById('valorDiv4').style.opacity = "1";
                document.getElementById('valorDiv4').style.display = "block";
            }
        }

        function inputCheckboxSelectPontos(input) {
            if (input.checked == true) {
                var spanSelecione = document.getElementsByClassName("pontuacao-circuito")[0];
                var comboCircuito = document.getElementById("pontuacaoCircuito");
                if (comboCircuito.value == "-") {
                    spanSelecione.style.color = "#ff0000";
                }
                else {
                    spanSelecione.style.color = "#000000";
                }
            }
            habilitarComboPontuacao(validarCircuitosPermitemEdicaoPonto());
        }

        function habilitarComboPontuacao(podeMostrarCombo)
        {
            if (podeMostrarCombo) {
                $('#pontuacaoCircuito').attr("disabled", false);
            }
            else {
                $('#pontuacaoCircuito').attr("disabled", true);
            }
        }

        function SelecionarCircuito(input) {
            document.getElementById('pontuacaoCircuito').value = input.value
            var spanSelecione = document.getElementsByClassName("pontuacao-circuito")[0];
            if (input.value == "-") {
                spanSelecione.style.color = "#ff0000";
                mostrarTabelaPontuacoes(false);
            }
            else {
                mostrarTabelaPontuacoes(true);
                carregarTabelasPontuacao(input.value);
                spanSelecione.style.color = "#000000";
            }
        }

        function validarCircuitosPermitemEdicaoPonto() {
            var possuiItemOk = false;
            var checkedItens = [];

            var checkboxes = document.getElementsByClassName("circuitos");

            Array.prototype.forEach.call(checkboxes, function(el) {
                if (el.checked) {
                    checkedItens.push(el.value);
                }
            });

            $("#circuitosPermiteEdicaoPontos li").each(function(item, el)
            {
                if (checkedItens.indexOf(el.textContent) >= 0) {
                    possuiItemOk = true;
                }
            });


            if (possuiItemOk == false) {
                var pontuacaoOriginal = document.getElementById("pontuacaoOriginalTorneio").value;
                var comboCircuito = document.getElementById("pontuacaoCircuito");
                comboCircuito.value = pontuacaoOriginal;
                if (checkedItens.length > 0 && comboCircuito.value != '-') {
                    carregarTabelasPontuacao(pontuacaoOriginal);
                    mostrarTabelaPontuacoes(true);
                }
                else {
                    mostrarTabelaPontuacoes(false);
                }
            }
            else {
                var comboCircuito = document.getElementById("pontuacaoCircuito");
                if (checkedItens.length > 0 && comboCircuito.value != '-') {
                    carregarTabelasPontuacao(comboCircuito.value);
                    mostrarTabelaPontuacoes(true);
                }
                else {
                    mostrarTabelaPontuacoes(false);
                }
            }
            return possuiItemOk;
        }

        if (!document.getElementById('isDesconto').checked) {
            //document.getElementById('descontoSocio').style.opacity = "0";
            //document.getElementById('descontoSocio').style.display = "none";
        }

        habilitarComboPontuacao(validarCircuitosPermitemEdicaoPonto());
        isTransferenciaBancaria();
        isCartaoCredito();
        habilibarValoresInscricao();
    </script>
}
